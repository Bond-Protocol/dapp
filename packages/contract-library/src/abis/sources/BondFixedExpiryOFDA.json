{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBondTeller",
          "name": "teller_",
          "type": "address"
        },
        {
          "internalType": "contract IBondAggregator",
          "name": "aggregator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian_",
          "type": "address"
        },
        {
          "internalType": "contract Authority",
          "name": "authority_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Auctioneer_AmountLessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_BadExpiry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_InvalidCallback",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_MarketNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_MaxPayoutExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_NewMarketsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_NotEnoughCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_OnlyMarketOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auctioneer_OraclePriceZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "MarketClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payoutToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allowNewMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "callbackAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "closeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "params_",
          "type": "bytes"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "currentCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAggregator",
      "outputs": [
        {
          "internalType": "contract IBondAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "getMarketInfoForPurchase",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "payoutToken",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTeller",
      "outputs": [
        {
          "internalType": "contract IBondTeller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "isInstantSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "marketScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "payoutToken",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer_",
          "type": "address"
        }
      ],
      "name": "maxAmountAccepted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositInterval",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMarketDuration",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "newOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer_",
          "type": "address"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "pullOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut_",
          "type": "uint256"
        }
      ],
      "name": "purchaseBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "name": "setAllowNewMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "name": "setCallbackAuthStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[6]",
          "name": "defaults_",
          "type": "uint32[6]"
        }
      ],
      "name": "setDefaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint32[3]",
          "name": "intervals_",
          "type": "uint32[3]"
        }
      ],
      "name": "setIntervals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "depositInterval_",
          "type": "uint48"
        }
      ],
      "name": "setMinDepositInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "duration_",
          "type": "uint48"
        }
      ],
      "name": "setMinMarketDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "contract IBondOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "fixedDiscount",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oracleConversion",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60c06040523480156200001157600080fd5b5060405162003c5c38038062003c5c833981016040819052620000349162000125565b600080546001600160a01b03199081166001600160a01b0385811691821784556001805490931690851617909155604051869286928692869284928492909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a3505050506001600160a01b039081166080521660a0525050600580546001600160681b03191669015180000000000e1001179055506200018d9050565b6001600160a01b03811681146200012257600080fd5b50565b600080600080608085870312156200013c57600080fd5b845162000149816200010c565b60208601519094506200015c816200010c565b60408601519093506200016f816200010c565b606086015190925062000182816200010c565b939692955090935050565b60805160a051613a86620001d66000396000818161045f01528181610ea3015281816118c801528181611d8a0152611e3e0152600081816102ae01526125af0152613a866000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063946824cd1161012a578063bd1f3a5e116100bd578063c7bf8ca01161008c578063d2bee32311610071578063d2bee323146107ae578063e007fa97146107cb578063f61338f6146107de57600080fd5b8063c7bf8ca01461076d578063d20406871461078057600080fd5b8063bd1f3a5e1461061f578063bf48582b14610630578063bf7e214f14610643578063c0aa0e8a1461066357600080fd5b8063afa9d3b0116100f9578063afa9d3b0146104ff578063b1283e771461050c578063bbbdd95a146105f9578063bcf6cde81461060c57600080fd5b8063946824cd146104395780639787d1071461045d578063acc5570c14610483578063ae418095146104ec57600080fd5b806357e333ba116101bd5780636729a41e1161018c5780637a9e5e4b116101715780637a9e5e4b146103f35780638b098db3146104065780638da5cb5b1461041957600080fd5b80636729a41e146103ab578063699e17d9146103e157600080fd5b806357e333ba1461032c5780635dc4d16b1461033f5780635f77274e146103625780636352211e1461037557600080fd5b80633ad59dbc116101f95780633ad59dbc146102ac5780633adec5a7146102f357806344ee01721461030657806353c7f8e01461031957600080fd5b806310b053171461022b57806313af4035146102405780631c063a6c146102535780632750745814610289575b600080fd5b61023e610239366004613167565b6107f1565b005b61023e61024e3660046131b2565b6108ac565b610276610261366004613167565b60009081526002602052604090206004015490565b6040519081526020015b60405180910390f35b61029c610297366004613167565b6109b5565b6040519015158152602001610280565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610280565b610276610301366004613167565b610a4e565b61023e6103143660046131ee565b610c24565b61027661032736600461320b565b610d5e565b61027661033a366004613167565b610f4d565b61029c61034d3660046131b2565b60066020526000908152604090205460ff1681565b61023e610370366004613296565b6112a9565b6102ce610383366004613167565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6102ce6103b9366004613167565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61023e6103ef3660046132b3565b5050565b61023e6104013660046131b2565b61136e565b61029c610414366004613167565b6114cb565b6000546102ce9073ffffffffffffffffffffffffffffffffffffffff1681565b610276610447366004613167565b6000908152600360208190526040909120015490565b7f00000000000000000000000000000000000000000000000000000000000000006102ce565b610496610491366004613167565b611504565b6040805173ffffffffffffffffffffffffffffffffffffffff97881681529587166020870152938616938501939093529316606083015265ffffffffffff909216608082015260a081019190915260c001610280565b61023e6104fa366004613167565b6115f4565b60055461029c9060ff1681565b61059461051a366004613167565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600686015460079096015473ffffffffffffffffffffffffffffffffffffffff95861697861696948616958416947401000000000000000000000000000000000000000090940460ff16939089565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a015296891696880196909652969093166060860152901515608085015260a084015260c083015260e082019290925261010081019190915261012001610280565b61023e6106073660046132e6565b6116e0565b61023e61061a36600461331f565b6117ca565b61023e61062d36600461339d565b50565b61027661063e36600461342e565b61187a565b6001546102ce9073ffffffffffffffffffffffffffffffffffffffff1681565b610709610671366004613167565b60036020819052600091825260409091208054600182015460028301549383015460049093015473ffffffffffffffffffffffffffffffffffffffff83169465ffffffffffff7401000000000000000000000000000000000000000085048116957a01000000000000000000000000000000000000000000000000000090950481169484821694660100000000000090049091169288565b6040805173ffffffffffffffffffffffffffffffffffffffff909916895265ffffffffffff97881660208a01529587169588019590955292851660608701529316608085015260a084019290925260c083019190915260e082015261010001610280565b61027661077b36600461331f565b6119c9565b60055461079790610100900465ffffffffffff1681565b60405165ffffffffffff9091168152602001610280565b60055461079790670100000000000000900465ffffffffffff1681565b6102766107d9366004613467565b611e24565b61023e6107ec3660046131ee565b6121a1565b60008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461084e576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600090815260046020908152604080832054600290925290912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6108da336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b610945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60008181526002602052604081206004015415801590610a0b575060008281526003602052604090205465ffffffffffff4281167a01000000000000000000000000000000000000000000000000000090920416115b8015610a48575060008281526003602052604090205465ffffffffffff428116740100000000000000000000000000000000000000009092041611155b92915050565b6000818152600360208181526040808420815161010081018352815473ffffffffffffffffffffffffffffffffffffffff811680835265ffffffffffff7401000000000000000000000000000000000000000083048116968401969096527a01000000000000000000000000000000000000000000000000000090910485168285015260018301548086166060840152660100000000000090049094166080820152600282015460a08201529381015460c085015260049081015460e085015290517f7a3c4c17000000000000000000000000000000000000000000000000000000008152908101859052839190637a3c4c1790602401602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190613493565b905080600003610bc2576040517fe67b3f4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260e0015182610bd491906134db565b90506000610c018460800151620186a0610bee9190613518565b839065ffffffffffff16620186a06123eb565b90508360a001518110610c145780610c1a565b8360a001515b9695505050505050565b610c52336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b60055465ffffffffffff61010090910481169082161080610ce35750620151808165ffffffffffff16105b15610d1a576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005805465ffffffffffff909216670100000000000000027fffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffff909216919091179055565b600080610d6d8385018561353f565b905062015180816101200151610d839190613653565b610d909062015180613678565b65ffffffffffff9081166101208301526101408201516000911615610dba57816101400151610dbc565b425b9050600082610160015182610dd191906136a6565b905082610120015165ffffffffffff16600014158015610e0557508065ffffffffffff1683610120015165ffffffffffff16105b15610e3c576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e4784612449565b905083610120015165ffffffffffff16600014610c1a5783516101208501516040517fc6e38a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263c6e38a4b92610eff9260040173ffffffffffffffffffffffffffffffffffffffff92909216825265ffffffffffff16602082015260400190565b6020604051808303816000875af1158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4291906136d0565b509695505050505050565b600080610f5983610a4e565b9050600060026000858152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff161515151581526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050600060036000868152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160009054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160069054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905060008260800151611275578260a00151611289565b60c082015160a08401516112899186612b28565b9050808360c00151116112a0578260c00151610c1a565b95945050505050565b6112d7336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b61133d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061145157506001546040517fb70096130000000000000000000000000000000000000000000000000000000081523360048201523060248201526000357fffffffff0000000000000000000000000000000000000000000000000000000016604482015273ffffffffffffffffffffffffffffffffffffffff9091169063b700961390606401602060405180830381865afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145191906136ed565b61145a57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b60008181526003602052604081206001015465ffffffffffff16635dba24008111156114fa57428111156114fd565b80155b9392505050565b6000818152600260208181526040808420815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168083526001808501548316848801819052978501548316848701819052600380870154948516606087018190527401000000000000000000000000000000000000000090950460ff1615156080870152600487015460a0870152600587015460c0870152600687015460e08701526007909601546101008601528a8a529490965293872090940154869586958695869586959491939165ffffffffffff166115df8d610f4d565b949d939c50919a509850965090945092505050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611651576040517f4e1c8b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600360209081526040808320805479ffffffffffffffffffffffffffffffffffffffffffffffffffff167a0100000000000000000000000000000000000000000000000000004265ffffffffffff160217905560029091528082206004018290555182917f9dc30b8eda31a6a144e092e5de600955523a6a925cc15cc1d1b9b4872cfa615591a250565b61170e336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b611774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611827576040517f4e1c8b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009182526004602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6040517fb88c914800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000918291611948917f00000000000000000000000000000000000000000000000000000000000000009091169063b88c914890602401602060405180830381865afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611935919061370a565b869065ffffffffffff16620186a0612b28565b6000858152600360208190526040822001549192509061197c9061196b87610a4e565b611975858a613727565b9190612b28565b905061198785610f4d565b8111156119c0576040517f5c430eae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b91506114fd9050565b60008060026000858152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff161515151581526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050600060036000868152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160009054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160069054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090506000611cda86610a4e565b905060008360800151611d015760c083015160a0850151611cfc918490612b28565b611d07565b8360a001515b90506000611d28838560c001518760c00151612b289092919063ffffffff16565b90506000818310611d395781611d3b565b825b6040517fb88c914800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152919250600091611e0a917f00000000000000000000000000000000000000000000000000000000000000009091169063b88c914890602401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df7919061370a565b839065ffffffffffff16620186a0612b28565b9050611e16818361373e565b9a9950505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611e95576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600260208181526040808420600380845294829020825161010081018452815473ffffffffffffffffffffffffffffffffffffffff808216835265ffffffffffff7401000000000000000000000000000000000000000083048116978401979097527a010000000000000000000000000000000000000000000000000000909104861694820194909452600182015480861660608301526601000000000000900490941660808501529384015460a08401528385015460c084015260049093015460e083015292820154919290911615801590611f9e5750815473ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205460ff16155b15611fd5576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611fde866109b5565b612014576040517fa24c407400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061201f87610a4e565b60c083015190915061203390879083612b28565b93508484101561206f576040517f74ec9d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600501548411156120ad576040517f5c430eae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600383015474010000000000000000000000000000000000000000900460ff166120dd57826004015484116120e5565b826004015486115b1561211c576040517ff3383dc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600383015474010000000000000000000000000000000000000000900460ff166121465783612148565b855b83600401600082825461215b9190613727565b9250508190555085836007016000828254612176919061373e565b9250508190555083836006016000828254612191919061373e565b9091555093979650505050505050565b6121cf336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b612235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b60055465ffffffffffff670100000000000000909104811690821611806122655750610e108165ffffffffffff16105b1561229c576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005805465ffffffffffff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000ff909216919091179055565b60015460009073ffffffffffffffffffffffffffffffffffffffff1680158015906123be57506040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff000000000000000000000000000000000000000000000000000000008516604483015282169063b700961390606401602060405180830381865afa15801561239a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123be91906136ed565b806123e3575060005473ffffffffffffffffffffffffffffffffffffffff8581169116145b949350505050565b60006123f8848484612b28565b90506000828061240a5761240a613624565b84860911156114fd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061243f57600080fd5b6001019392505050565b60055460009060ff16612488576040517f64be3ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602052604090205460ff161580156124c15750604082015173ffffffffffffffffffffffffffffffffffffffff1615155b156124f8576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082610140015165ffffffffffff1611801561252157504282610140015165ffffffffffff16105b15612558576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815160208301516040517fb435914300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526000917f0000000000000000000000000000000000000000000000000000000000000000169063b4359143906044016020604051808303816000875af11580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190613493565b600081815260026020818152604080842080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081163317825589840151948201805473ffffffffffffffffffffffffffffffffffffffff968716908316179055895160018301805491871691909216179055888201516003808301805460c08d0151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff000000000000000000000000000000000000000000909116939097169290921795909517905560e089015160048201559290915290912060808601519293509091620186a065ffffffffffff9190911610158061273957508460a0015165ffffffffffff16856080015165ffffffffffff16115b15612770576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808501516001820180547fffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffff16660100000000000065ffffffffffff841602179055606086015160208701518751600093849384936127d0938a93612bf4565b60608b015187547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178755600487018290556003870181905560a08b01519295509093509150620186a065ffffffffffff9091161115612875576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61289e8860a00151620186a061288b9190613518565b849065ffffffffffff16620186a06123eb565b600285015560055461016089015165ffffffffffff6701000000000000009092048216911610806128e4575060055461010089810151910465ffffffffffff9081169116105b80612908575087610160015165ffffffffffff1688610100015165ffffffffffff16115b1561293f576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008860c00151612954578860e0015161298d565b61298d826129818b60800151620186a061296e9190613518565b879065ffffffffffff16620186a06123eb565b60e08c01519190612b28565b90506129be89610100015165ffffffffffff168a610160015165ffffffffffff1683612b289092919063ffffffff16565b60058701556101208901516001860180547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001665ffffffffffff9283161790556101408a01516000911615612a1857896101400151612a1a565b425b86547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000065ffffffffffff8316021787556101608b0151909150612a7490826136a6565b865479ffffffffffffffffffffffffffffffffffffffffffffffffffff167a01000000000000000000000000000000000000000000000000000065ffffffffffff9283160217875560208b8101518c516101208e01516040519416845273ffffffffffffffffffffffffffffffffffffffff918216939116918b917f9cc08aa705173351ee44462d57949faf65814067be71f3271ec1f5636f9efa2d910160405180910390a4509598975050505050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003612b7f5760008411612b7457600080fd5b5082900490506114fd565b808411612b8b57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c699190613756565b905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc9190613756565b905060068260ff161080612cf3575060128260ff16115b15612d2a576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60068160ff161080612d3f575060128160ff16115b15612d76576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff89161580612dae575073ffffffffffffffffffffffffffffffffffffffff89163b155b15612de5576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5538adb7000000000000000000000000000000000000000000000000000000008152600481018b905273ffffffffffffffffffffffffffffffffffffffff898116602483015288811660448301528a1690635538adb790606401600060405180830381600087803b158015612e5d57600080fd5b505af1158015612e71573d6000803e3d6000fd5b50506040517f7a3c4c17000000000000000000000000000000000000000000000000000000008152600481018d90526000925073ffffffffffffffffffffffffffffffffffffffff8c169150637a3c4c1790602401602060405180830381865afa158015612ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f079190613493565b905080600003612f43576040517fe67b3f4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3f47e662000000000000000000000000000000000000000000000000000000008152600481018c905260009073ffffffffffffffffffffffffffffffffffffffff8c1690633f47e66290602401602060405180830381865afa158015612fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd59190613756565b905060068160ff161080612fec575060128160ff16115b15613023576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061305161304b6130388b620186a0613518565b859065ffffffffffff16620186a06123eb565b83613132565b905061305c81613779565b60000b8260000b131580613073575060188160000b135b156130aa576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826130b86002846137b7565b6130c390602461382b565b6130cd919061382b565b6130d890600a6139ad565b905060006130e76002846137b7565b866130f38960246139bc565b6130fd919061382b565b613107919061382b565b61311290600a6139ad565b905061311e82866134db565b9f919e509c509a5050505050505050505050565b6000805b600a841061315d57613149600a85613a1d565b93508061315581613a31565b915050613136565b6123e3838261382b565b60006020828403121561317957600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461062d57600080fd5b80356131ad81613180565b919050565b6000602082840312156131c457600080fd5b81356114fd81613180565b65ffffffffffff8116811461062d57600080fd5b80356131ad816131cf565b60006020828403121561320057600080fd5b81356114fd816131cf565b6000806020838503121561321e57600080fd5b823567ffffffffffffffff8082111561323657600080fd5b818501915085601f83011261324a57600080fd5b81358181111561325957600080fd5b86602082850101111561326b57600080fd5b60209290920196919550909350505050565b801515811461062d57600080fd5b80356131ad8161327d565b6000602082840312156132a857600080fd5b81356114fd8161327d565b600080608083850312156132c657600080fd5b82359150836080840111156132da57600080fd5b50926020919091019150565b600080604083850312156132f957600080fd5b823561330481613180565b915060208301356133148161327d565b809150509250929050565b6000806040838503121561333257600080fd5b82359150602083013561331481613180565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561339757613397613344565b60405290565b600060c082840312156133af57600080fd5b82601f8301126133be57600080fd5b60405160c0810181811067ffffffffffffffff821117156133e1576133e1613344565b6040528060c08401858111156133f657600080fd5b845b8181101561342357803563ffffffff811681146134155760008081fd5b8352602092830192016133f8565b509195945050505050565b60008060006060848603121561344357600080fd5b8335925060208401359150604084013561345c81613180565b809150509250925092565b60008060006060848603121561347c57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156134a557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613513576135136134ac565b500290565b600065ffffffffffff83811690831681811015613537576135376134ac565b039392505050565b6000610180828403121561355257600080fd5b61355a613373565b613563836131a2565b8152613571602084016131a2565b6020820152613582604084016131a2565b6040820152613593606084016131a2565b60608201526135a4608084016131e3565b60808201526135b560a084016131e3565b60a08201526135c660c0840161328b565b60c082015260e083013560e08201526101006135e38185016131e3565b908201526101206135f58482016131e3565b908201526101406136078482016131e3565b908201526101606136198482016131e3565b908201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600065ffffffffffff8084168061366c5761366c613624565b92169190910492915050565b600065ffffffffffff8083168185168183048111821515161561369d5761369d6134ac565b02949350505050565b600065ffffffffffff8083168185168083038211156136c7576136c76134ac565b01949350505050565b6000602082840312156136e257600080fd5b81516114fd81613180565b6000602082840312156136ff57600080fd5b81516114fd8161327d565b60006020828403121561371c57600080fd5b81516114fd816131cf565b600082821015613739576137396134ac565b500390565b60008219821115613751576137516134ac565b500190565b60006020828403121561376857600080fd5b815160ff811681146114fd57600080fd5b60008160000b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8081036137ae576137ae6134ac565b60000392915050565b60008160000b8360000b806137ce576137ce613624565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083141615613822576138226134ac565b90059392505050565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800183128115161561386e5761386e6134ac565b81607f018313811615613883576138836134ac565b5090039392505050565b600181815b808511156138e657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156138cc576138cc6134ac565b808516156138d957918102915b93841c9390800290613892565b509250929050565b6000826138fd57506001610a48565b8161390a57506000610a48565b8160018114613920576002811461392a57613946565b6001915050610a48565b60ff84111561393b5761393b6134ac565b50506001821b610a48565b5060208310610133831016604e8410600b8410161715613969575081810a610a48565b613973838361388d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156139a5576139a56134ac565b029392505050565b60006114fd60ff8416836138ee565b60008160000b8360000b6000821282607f038213811516156139e0576139e06134ac565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80038212811615613a1457613a146134ac565b50019392505050565b600082613a2c57613a2c613624565b500490565b60008160000b607f8103613a4757613a476134ac565b6001019291505056fea2646970667358221220b2be0b924286808076a607abc90bd087ee17e0074fc4ce57a2b3dea20a7d297464736f6c634300080f0033",
    "sourceMap": "1714:1625:31:-:0;;;1809:201;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;671:5:22;:14;;-1:-1:-1;;;;;;671:14:22;;;-1:-1:-1;;;;;671:14:22;;;;;;;;-1:-1:-1;695:22:22;;;;;;;;;;;;733:32;;1963:7:31;;1972:11;;671:14:22;;695:22;;671:14;;695:22;;671:14;;746:10;;733:32;;671:5;733:32;780:40;;-1:-1:-1;;;;;780:40:22;;;797:10;;780:40;;;;;-1:-1:-1;;;;;;;;;4333:25:42;;::::1;;::::0;4368:17:::1;;::::0;-1:-1:-1;;4396:18:42::1;:28:::0;;-1:-1:-1;;;;;;4471:22:42;;;;;-1:-1:-1;1714:1625:31;;-1:-1:-1;1714:1625:31;14:144:124;-1:-1:-1;;;;;102:31:124;;92:42;;82:70;;148:1;145;138:12;82:70;14:144;:::o;163:771::-;325:6;333;341;349;402:3;390:9;381:7;377:23;373:33;370:53;;;419:1;416;409:12;370:53;451:9;445:16;470:44;508:5;470:44;:::i;:::-;583:2;568:18;;562:25;533:5;;-1:-1:-1;596:46:124;562:25;596:46;:::i;:::-;713:2;698:18;;692:25;661:7;;-1:-1:-1;726:46:124;692:25;726:46;:::i;:::-;843:2;828:18;;822:25;791:7;;-1:-1:-1;856:46:124;822:25;856:46;:::i;:::-;163:771;;;;-1:-1:-1;163:771:124;;-1:-1:-1;;163:771:124:o;:::-;1714:1625:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c8063946824cd1161012a578063bd1f3a5e116100bd578063c7bf8ca01161008c578063d2bee32311610071578063d2bee323146107ae578063e007fa97146107cb578063f61338f6146107de57600080fd5b8063c7bf8ca01461076d578063d20406871461078057600080fd5b8063bd1f3a5e1461061f578063bf48582b14610630578063bf7e214f14610643578063c0aa0e8a1461066357600080fd5b8063afa9d3b0116100f9578063afa9d3b0146104ff578063b1283e771461050c578063bbbdd95a146105f9578063bcf6cde81461060c57600080fd5b8063946824cd146104395780639787d1071461045d578063acc5570c14610483578063ae418095146104ec57600080fd5b806357e333ba116101bd5780636729a41e1161018c5780637a9e5e4b116101715780637a9e5e4b146103f35780638b098db3146104065780638da5cb5b1461041957600080fd5b80636729a41e146103ab578063699e17d9146103e157600080fd5b806357e333ba1461032c5780635dc4d16b1461033f5780635f77274e146103625780636352211e1461037557600080fd5b80633ad59dbc116101f95780633ad59dbc146102ac5780633adec5a7146102f357806344ee01721461030657806353c7f8e01461031957600080fd5b806310b053171461022b57806313af4035146102405780631c063a6c146102535780632750745814610289575b600080fd5b61023e610239366004613167565b6107f1565b005b61023e61024e3660046131b2565b6108ac565b610276610261366004613167565b60009081526002602052604090206004015490565b6040519081526020015b60405180910390f35b61029c610297366004613167565b6109b5565b6040519015158152602001610280565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610280565b610276610301366004613167565b610a4e565b61023e6103143660046131ee565b610c24565b61027661032736600461320b565b610d5e565b61027661033a366004613167565b610f4d565b61029c61034d3660046131b2565b60066020526000908152604090205460ff1681565b61023e610370366004613296565b6112a9565b6102ce610383366004613167565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6102ce6103b9366004613167565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61023e6103ef3660046132b3565b5050565b61023e6104013660046131b2565b61136e565b61029c610414366004613167565b6114cb565b6000546102ce9073ffffffffffffffffffffffffffffffffffffffff1681565b610276610447366004613167565b6000908152600360208190526040909120015490565b7f00000000000000000000000000000000000000000000000000000000000000006102ce565b610496610491366004613167565b611504565b6040805173ffffffffffffffffffffffffffffffffffffffff97881681529587166020870152938616938501939093529316606083015265ffffffffffff909216608082015260a081019190915260c001610280565b61023e6104fa366004613167565b6115f4565b60055461029c9060ff1681565b61059461051a366004613167565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600686015460079096015473ffffffffffffffffffffffffffffffffffffffff95861697861696948616958416947401000000000000000000000000000000000000000090940460ff16939089565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a015296891696880196909652969093166060860152901515608085015260a084015260c083015260e082019290925261010081019190915261012001610280565b61023e6106073660046132e6565b6116e0565b61023e61061a36600461331f565b6117ca565b61023e61062d36600461339d565b50565b61027661063e36600461342e565b61187a565b6001546102ce9073ffffffffffffffffffffffffffffffffffffffff1681565b610709610671366004613167565b60036020819052600091825260409091208054600182015460028301549383015460049093015473ffffffffffffffffffffffffffffffffffffffff83169465ffffffffffff7401000000000000000000000000000000000000000085048116957a01000000000000000000000000000000000000000000000000000090950481169484821694660100000000000090049091169288565b6040805173ffffffffffffffffffffffffffffffffffffffff909916895265ffffffffffff97881660208a01529587169588019590955292851660608701529316608085015260a084019290925260c083019190915260e082015261010001610280565b61027661077b36600461331f565b6119c9565b60055461079790610100900465ffffffffffff1681565b60405165ffffffffffff9091168152602001610280565b60055461079790670100000000000000900465ffffffffffff1681565b6102766107d9366004613467565b611e24565b61023e6107ec3660046131ee565b6121a1565b60008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461084e576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600090815260046020908152604080832054600290925290912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6108da336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b610945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60008181526002602052604081206004015415801590610a0b575060008281526003602052604090205465ffffffffffff4281167a01000000000000000000000000000000000000000000000000000090920416115b8015610a48575060008281526003602052604090205465ffffffffffff428116740100000000000000000000000000000000000000009092041611155b92915050565b6000818152600360208181526040808420815161010081018352815473ffffffffffffffffffffffffffffffffffffffff811680835265ffffffffffff7401000000000000000000000000000000000000000083048116968401969096527a01000000000000000000000000000000000000000000000000000090910485168285015260018301548086166060840152660100000000000090049094166080820152600282015460a08201529381015460c085015260049081015460e085015290517f7a3c4c17000000000000000000000000000000000000000000000000000000008152908101859052839190637a3c4c1790602401602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190613493565b905080600003610bc2576040517fe67b3f4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260e0015182610bd491906134db565b90506000610c018460800151620186a0610bee9190613518565b839065ffffffffffff16620186a06123eb565b90508360a001518110610c145780610c1a565b8360a001515b9695505050505050565b610c52336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b60055465ffffffffffff61010090910481169082161080610ce35750620151808165ffffffffffff16105b15610d1a576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005805465ffffffffffff909216670100000000000000027fffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffff909216919091179055565b600080610d6d8385018561353f565b905062015180816101200151610d839190613653565b610d909062015180613678565b65ffffffffffff9081166101208301526101408201516000911615610dba57816101400151610dbc565b425b9050600082610160015182610dd191906136a6565b905082610120015165ffffffffffff16600014158015610e0557508065ffffffffffff1683610120015165ffffffffffff16105b15610e3c576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e4784612449565b905083610120015165ffffffffffff16600014610c1a5783516101208501516040517fc6e38a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263c6e38a4b92610eff9260040173ffffffffffffffffffffffffffffffffffffffff92909216825265ffffffffffff16602082015260400190565b6020604051808303816000875af1158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4291906136d0565b509695505050505050565b600080610f5983610a4e565b9050600060026000858152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff161515151581526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050600060036000868152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160009054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160069054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905060008260800151611275578260a00151611289565b60c082015160a08401516112899186612b28565b9050808360c00151116112a0578260c00151610c1a565b95945050505050565b6112d7336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b61133d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061145157506001546040517fb70096130000000000000000000000000000000000000000000000000000000081523360048201523060248201526000357fffffffff0000000000000000000000000000000000000000000000000000000016604482015273ffffffffffffffffffffffffffffffffffffffff9091169063b700961390606401602060405180830381865afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145191906136ed565b61145a57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b60008181526003602052604081206001015465ffffffffffff16635dba24008111156114fa57428111156114fd565b80155b9392505050565b6000818152600260208181526040808420815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168083526001808501548316848801819052978501548316848701819052600380870154948516606087018190527401000000000000000000000000000000000000000090950460ff1615156080870152600487015460a0870152600587015460c0870152600687015460e08701526007909601546101008601528a8a529490965293872090940154869586958695869586959491939165ffffffffffff166115df8d610f4d565b949d939c50919a509850965090945092505050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611651576040517f4e1c8b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600360209081526040808320805479ffffffffffffffffffffffffffffffffffffffffffffffffffff167a0100000000000000000000000000000000000000000000000000004265ffffffffffff160217905560029091528082206004018290555182917f9dc30b8eda31a6a144e092e5de600955523a6a925cc15cc1d1b9b4872cfa615591a250565b61170e336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b611774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611827576040517f4e1c8b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009182526004602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6040517fb88c914800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000918291611948917f00000000000000000000000000000000000000000000000000000000000000009091169063b88c914890602401602060405180830381865afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611935919061370a565b869065ffffffffffff16620186a0612b28565b6000858152600360208190526040822001549192509061197c9061196b87610a4e565b611975858a613727565b9190612b28565b905061198785610f4d565b8111156119c0576040517f5c430eae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b91506114fd9050565b60008060026000858152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff161515151581526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050600060036000868152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160009054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160069054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090506000611cda86610a4e565b905060008360800151611d015760c083015160a0850151611cfc918490612b28565b611d07565b8360a001515b90506000611d28838560c001518760c00151612b289092919063ffffffff16565b90506000818310611d395781611d3b565b825b6040517fb88c914800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152919250600091611e0a917f00000000000000000000000000000000000000000000000000000000000000009091169063b88c914890602401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df7919061370a565b839065ffffffffffff16620186a0612b28565b9050611e16818361373e565b9a9950505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611e95576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600260208181526040808420600380845294829020825161010081018452815473ffffffffffffffffffffffffffffffffffffffff808216835265ffffffffffff7401000000000000000000000000000000000000000083048116978401979097527a010000000000000000000000000000000000000000000000000000909104861694820194909452600182015480861660608301526601000000000000900490941660808501529384015460a08401528385015460c084015260049093015460e083015292820154919290911615801590611f9e5750815473ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205460ff16155b15611fd5576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611fde866109b5565b612014576040517fa24c407400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061201f87610a4e565b60c083015190915061203390879083612b28565b93508484101561206f576040517f74ec9d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600501548411156120ad576040517f5c430eae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600383015474010000000000000000000000000000000000000000900460ff166120dd57826004015484116120e5565b826004015486115b1561211c576040517ff3383dc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600383015474010000000000000000000000000000000000000000900460ff166121465783612148565b855b83600401600082825461215b9190613727565b9250508190555085836007016000828254612176919061373e565b9250508190555083836006016000828254612191919061373e565b9091555093979650505050505050565b6121cf336000357fffffffff00000000000000000000000000000000000000000000000000000000166122da565b612235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161093c565b60055465ffffffffffff670100000000000000909104811690821611806122655750610e108165ffffffffffff16105b1561229c576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005805465ffffffffffff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000ff909216919091179055565b60015460009073ffffffffffffffffffffffffffffffffffffffff1680158015906123be57506040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff000000000000000000000000000000000000000000000000000000008516604483015282169063b700961390606401602060405180830381865afa15801561239a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123be91906136ed565b806123e3575060005473ffffffffffffffffffffffffffffffffffffffff8581169116145b949350505050565b60006123f8848484612b28565b90506000828061240a5761240a613624565b84860911156114fd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061243f57600080fd5b6001019392505050565b60055460009060ff16612488576040517f64be3ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602052604090205460ff161580156124c15750604082015173ffffffffffffffffffffffffffffffffffffffff1615155b156124f8576040517f2c47703200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082610140015165ffffffffffff1611801561252157504282610140015165ffffffffffff16105b15612558576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815160208301516040517fb435914300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526000917f0000000000000000000000000000000000000000000000000000000000000000169063b4359143906044016020604051808303816000875af11580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190613493565b600081815260026020818152604080842080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081163317825589840151948201805473ffffffffffffffffffffffffffffffffffffffff968716908316179055895160018301805491871691909216179055888201516003808301805460c08d0151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff000000000000000000000000000000000000000000909116939097169290921795909517905560e089015160048201559290915290912060808601519293509091620186a065ffffffffffff9190911610158061273957508460a0015165ffffffffffff16856080015165ffffffffffff16115b15612770576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808501516001820180547fffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffff16660100000000000065ffffffffffff841602179055606086015160208701518751600093849384936127d0938a93612bf4565b60608b015187547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178755600487018290556003870181905560a08b01519295509093509150620186a065ffffffffffff9091161115612875576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61289e8860a00151620186a061288b9190613518565b849065ffffffffffff16620186a06123eb565b600285015560055461016089015165ffffffffffff6701000000000000009092048216911610806128e4575060055461010089810151910465ffffffffffff9081169116105b80612908575087610160015165ffffffffffff1688610100015165ffffffffffff16115b1561293f576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008860c00151612954578860e0015161298d565b61298d826129818b60800151620186a061296e9190613518565b879065ffffffffffff16620186a06123eb565b60e08c01519190612b28565b90506129be89610100015165ffffffffffff168a610160015165ffffffffffff1683612b289092919063ffffffff16565b60058701556101208901516001860180547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001665ffffffffffff9283161790556101408a01516000911615612a1857896101400151612a1a565b425b86547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000065ffffffffffff8316021787556101608b0151909150612a7490826136a6565b865479ffffffffffffffffffffffffffffffffffffffffffffffffffff167a01000000000000000000000000000000000000000000000000000065ffffffffffff9283160217875560208b8101518c516101208e01516040519416845273ffffffffffffffffffffffffffffffffffffffff918216939116918b917f9cc08aa705173351ee44462d57949faf65814067be71f3271ec1f5636f9efa2d910160405180910390a4509598975050505050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003612b7f5760008411612b7457600080fd5b5082900490506114fd565b808411612b8b57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c699190613756565b905060008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc9190613756565b905060068260ff161080612cf3575060128260ff16115b15612d2a576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60068160ff161080612d3f575060128160ff16115b15612d76576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff89161580612dae575073ffffffffffffffffffffffffffffffffffffffff89163b155b15612de5576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5538adb7000000000000000000000000000000000000000000000000000000008152600481018b905273ffffffffffffffffffffffffffffffffffffffff898116602483015288811660448301528a1690635538adb790606401600060405180830381600087803b158015612e5d57600080fd5b505af1158015612e71573d6000803e3d6000fd5b50506040517f7a3c4c17000000000000000000000000000000000000000000000000000000008152600481018d90526000925073ffffffffffffffffffffffffffffffffffffffff8c169150637a3c4c1790602401602060405180830381865afa158015612ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f079190613493565b905080600003612f43576040517fe67b3f4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3f47e662000000000000000000000000000000000000000000000000000000008152600481018c905260009073ffffffffffffffffffffffffffffffffffffffff8c1690633f47e66290602401602060405180830381865afa158015612fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd59190613756565b905060068160ff161080612fec575060128160ff16115b15613023576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061305161304b6130388b620186a0613518565b859065ffffffffffff16620186a06123eb565b83613132565b905061305c81613779565b60000b8260000b131580613073575060188160000b135b156130aa576040517f3b596f5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826130b86002846137b7565b6130c390602461382b565b6130cd919061382b565b6130d890600a6139ad565b905060006130e76002846137b7565b866130f38960246139bc565b6130fd919061382b565b613107919061382b565b61311290600a6139ad565b905061311e82866134db565b9f919e509c509a5050505050505050505050565b6000805b600a841061315d57613149600a85613a1d565b93508061315581613a31565b915050613136565b6123e3838261382b565b60006020828403121561317957600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461062d57600080fd5b80356131ad81613180565b919050565b6000602082840312156131c457600080fd5b81356114fd81613180565b65ffffffffffff8116811461062d57600080fd5b80356131ad816131cf565b60006020828403121561320057600080fd5b81356114fd816131cf565b6000806020838503121561321e57600080fd5b823567ffffffffffffffff8082111561323657600080fd5b818501915085601f83011261324a57600080fd5b81358181111561325957600080fd5b86602082850101111561326b57600080fd5b60209290920196919550909350505050565b801515811461062d57600080fd5b80356131ad8161327d565b6000602082840312156132a857600080fd5b81356114fd8161327d565b600080608083850312156132c657600080fd5b82359150836080840111156132da57600080fd5b50926020919091019150565b600080604083850312156132f957600080fd5b823561330481613180565b915060208301356133148161327d565b809150509250929050565b6000806040838503121561333257600080fd5b82359150602083013561331481613180565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561339757613397613344565b60405290565b600060c082840312156133af57600080fd5b82601f8301126133be57600080fd5b60405160c0810181811067ffffffffffffffff821117156133e1576133e1613344565b6040528060c08401858111156133f657600080fd5b845b8181101561342357803563ffffffff811681146134155760008081fd5b8352602092830192016133f8565b509195945050505050565b60008060006060848603121561344357600080fd5b8335925060208401359150604084013561345c81613180565b809150509250925092565b60008060006060848603121561347c57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156134a557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613513576135136134ac565b500290565b600065ffffffffffff83811690831681811015613537576135376134ac565b039392505050565b6000610180828403121561355257600080fd5b61355a613373565b613563836131a2565b8152613571602084016131a2565b6020820152613582604084016131a2565b6040820152613593606084016131a2565b60608201526135a4608084016131e3565b60808201526135b560a084016131e3565b60a08201526135c660c0840161328b565b60c082015260e083013560e08201526101006135e38185016131e3565b908201526101206135f58482016131e3565b908201526101406136078482016131e3565b908201526101606136198482016131e3565b908201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600065ffffffffffff8084168061366c5761366c613624565b92169190910492915050565b600065ffffffffffff8083168185168183048111821515161561369d5761369d6134ac565b02949350505050565b600065ffffffffffff8083168185168083038211156136c7576136c76134ac565b01949350505050565b6000602082840312156136e257600080fd5b81516114fd81613180565b6000602082840312156136ff57600080fd5b81516114fd8161327d565b60006020828403121561371c57600080fd5b81516114fd816131cf565b600082821015613739576137396134ac565b500390565b60008219821115613751576137516134ac565b500190565b60006020828403121561376857600080fd5b815160ff811681146114fd57600080fd5b60008160000b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8081036137ae576137ae6134ac565b60000392915050565b60008160000b8360000b806137ce576137ce613624565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083141615613822576138226134ac565b90059392505050565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800183128115161561386e5761386e6134ac565b81607f018313811615613883576138836134ac565b5090039392505050565b600181815b808511156138e657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156138cc576138cc6134ac565b808516156138d957918102915b93841c9390800290613892565b509250929050565b6000826138fd57506001610a48565b8161390a57506000610a48565b8160018114613920576002811461392a57613946565b6001915050610a48565b60ff84111561393b5761393b6134ac565b50506001821b610a48565b5060208310610133831016604e8410600b8410161715613969575081810a610a48565b613973838361388d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156139a5576139a56134ac565b029392505050565b60006114fd60ff8416836138ee565b60008160000b8360000b6000821282607f038213811516156139e0576139e06134ac565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80038212811615613a1457613a146134ac565b50019392505050565b600082613a2c57613a2c613624565b500490565b60008160000b607f8103613a4757613a476134ac565b6001019291505056fea2646970667358221220b2be0b924286808076a607abc90bd087ee17e0074fc4ce57a2b3dea20a7d297464736f6c634300080f0033",
    "sourceMap": "1714:1625:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12434:183:42;;;;;;:::i;:::-;;:::i;:::-;;1936:147:22;;;;;;:::i;:::-;;:::i;22805:124:42:-;;;;;;:::i;:::-;22875:7;22901:12;;;:7;:12;;;;;:21;;;;22805:124;;;;895:25:124;;;883:2;868:18;22805:124:42;;;;;;;;22079:239;;;;;;:::i;:::-;;:::i;:::-;;;1096:14:124;;1089:22;1071:41;;1059:2;1044:18;22079:239:42;931:187:124;22654:109:42;22745:11;22654:109;;;1324:42:124;1312:55;;;1294:74;;1282:2;1267:18;22654:109:42;1123:251:124;18203:819:42;;;;;;:::i;:::-;;:::i;12653:365::-;;;;;;:::i;:::-;;:::i;2049:1288:31:-;;;;;;:::i;:::-;;:::i;19912:589:42:-;;;;;;:::i;:::-;;:::i;3627:50::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;13761:161;;;;;;:::i;:::-;;:::i;22360:113::-;;;;;;:::i;:::-;22422:7;22448:12;;;:7;:12;;;;;:18;;;;22360:113;3038:44;;;;;;:::i;:::-;;;;;;;;;;;;;;;;13517:86;;;;;;:::i;:::-;;;;1496:434:22;;;;;;:::i;:::-;;:::i;21833:204:42:-;;;;;;:::i;:::-;;:::i;551:20:22:-;;;;;;;;;19064:115:42;;;;;;:::i;:::-;19130:7;19156:10;;;:5;:10;;;;;;;;:16;;;19064:115;22515:97;22598:7;22515:97;;17606:555;;;;;;:::i;:::-;;:::i;:::-;;;;4398:42:124;4467:15;;;4449:34;;4519:15;;;4514:2;4499:18;;4492:43;4571:15;;;4551:18;;;4544:43;;;;4623:15;;4618:2;4603:18;;4596:43;4688:14;4676:27;;;4670:3;4655:19;;4648:56;4735:3;4720:19;;4713:35;;;;4375:3;4360:19;17606:555:42;4073:681:124;14201:267:42;;;;;;:::i;:::-;;:::i;3258:27::-;;;;;;;;;2757:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5164:42:124;5233:15;;;5215:34;;5285:15;;;5280:2;5265:18;;5258:43;5337:15;;;5317:18;;;5310:43;;;;5389:15;;;;5384:2;5369:18;;5362:43;5449:14;;5442:22;5436:3;5421:19;;5414:51;5496:3;5481:19;;5474:35;5540:3;5525:19;;5518:35;5584:3;5569:19;;5562:35;;;;5628:3;5613:19;;5606:35;;;;5141:3;5126:19;2757:45:42;4759:888:124;13964:195:42;;;;;;:::i;:::-;;:::i;12193:199::-;;;;;;:::i;:::-;;:::i;13650:69::-;;;;;;:::i;:::-;;;19221:655;;;;;;:::i;:::-;;:::i;578:26:22:-;;;;;;;;;2879:42:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8764::124;8752:55;;;8734:74;;8827:14;8877:15;;;8872:2;8857:18;;8850:43;8929:15;;;8909:18;;;8902:43;;;;8981:15;;;8976:2;8961:18;;8954:43;9034:15;;9028:3;9013:19;;9006:44;9081:3;9066:19;;9059:35;;;;9125:3;9110:19;;9103:35;;;;9169:3;9154:19;;9147:35;8721:3;8706:19;2879:42:42;8378:810:124;20543:1248:42;;;;;;:::i;:::-;;:::i;3409:32::-;;;;;;;;;;;;;;;9367:14:124;9355:27;;;9337:46;;9325:2;9310:18;3409:32:42;9193:196:124;3499:31:42;;;;;;;;;;;;14560:2152;;;;;;:::i;:::-;;:::i;13054:416::-;;;;;;:::i;:::-;;:::i;12434:183::-;12516:14;;;;:9;:14;;;;;;;;12502:10;:28;12498:67;;12539:26;;;;;;;;;;;;;;12498:67;12596:14;;;;:9;:14;;;;;;;;;12575:7;:12;;;;;;:35;;;;12596:14;;;;12575:35;;;;;;12434:183::o;1936:147:22:-;875:33;888:10;900:7;;;;875:12;:33::i;:::-;867:58;;;;;;;9917:2:124;867:58:22;;;9899:21:124;9956:2;9936:18;;;9929:30;9995:14;9975:18;;;9968:42;10027:18;;867:58:22;;;;;;;;;2010:5:::1;:16:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;2042:34:::1;::::0;2010:16;;2055:10:::1;::::0;2042:34:::1;::::0;2010:5;2042:34:::1;1936:147:::0;:::o;22079:239:42:-;22138:4;22162:12;;;:7;:12;;;;;:21;;;:26;;;;:89;;-1:-1:-1;22204:10:42;;;;:5;:10;;;;;:21;:47;22235:15;22204:47;;:21;;;;;:47;22162:89;:148;;;;-1:-1:-1;22267:10:42;;;;:5;:10;;;;;:16;:43;22294:15;22267:43;;:16;;;;;:43;;22162:148;22154:157;22079:239;-1:-1:-1;;22079:239:42:o;18203:819::-;18267:7;18359:10;;;:5;:10;;;;;;;;18335:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18401:29;;;;;;;;895:25:124;;;18267:7:42;;18335:34;18401:24;;868:18:124;;18401:29:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18379:51;;18477:11;18492:1;18477:16;18473:57;;18502:28;;;;;;;;;;;;;;18473:57;18629:13;18659:4;:21;;;18645:11;:35;;;;:::i;:::-;18629:51;;18727:23;18753:111;18803:4;:18;;;3882:3;18781:40;;;;:::i;:::-;18753:5;;:111;;3882:3;18753:14;:111::i;:::-;18727:137;;18968:4;:13;;;18950:15;:31;:65;;19000:15;18950:65;;;18984:4;:13;;;18950:65;18943:72;18203:819;-1:-1:-1;;;;;;18203:819:42:o;12653:365::-;875:33:22;888:10;900:7;;;;875:12;:33::i;:::-;867:58;;;;;;;9917:2:124;867:58:22;;;9899:21:124;9956:2;9936:18;;;9929:30;9995:14;9975:18;;;9968:42;10027:18;;867:58:22;9715:336:124;867:58:22;12896:18:42::1;::::0;::::1;;::::0;;::::1;::::0;::::1;12884:30:::0;;::::1;;::::0;:52:::1;;;12930:6;12918:9;:18;;;12884:52;12880:91;;;12945:26;;;;;;;;;;;;;;12880:91;12982:17;:29:::0;;::::1;::::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;12653:365::o;2049:1288:31:-;2122:7;;2244:35;;;;2255:7;2244:35;:::i;:::-;2215:64;;2480:6;2463;:14;;;:23;;;;:::i;:::-;2462:34;;2490:6;2462:34;:::i;:::-;2445:51;;;;:14;;;:51;2684:12;;;;2669;;2684:17;;:58;;2730:6;:12;;;2684:58;;;2711:15;2684:58;2669:73;;2752:17;2780:6;:15;;;2772:5;:23;;;;:::i;:::-;2752:43;;2889:6;:14;;;:19;;2907:1;2889:19;;:50;;;;;2929:10;2912:27;;:6;:14;;;:27;;;2889:50;2885:89;;;2948:26;;;;;;;;;;;;;;2885:89;3031:16;3050:21;3064:6;3050:13;:21::i;:::-;3031:40;;3160:6;:14;;;:19;;3178:1;3160:19;3156:120;;3241:18;;3261:14;;;;3193:83;;;;;:47;3224:7;3193:47;;;;:83;;;;13164:42:124;13152:55;;;;13134:74;;13256:14;13244:27;13239:2;13224:18;;13217:55;13122:2;13107:18;;12947:331;3193:83:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3322:8;2049:1288;-1:-1:-1;;;;;;2049:1288:31:o;19912:589:42:-;19974:7;20022:13;20038:16;20050:3;20038:11;:16::i;:::-;20022:32;;20065:24;20092:7;:12;20100:3;20092:12;;;;;;;;;;;20065:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20114:21;20138:5;:10;20144:3;20138:10;;;;;;;;;;;20114:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20240:16;20259:6;:22;;;:108;;20352:6;:15;;;20259:108;;;20319:10;;;;20296:15;;;;:41;;20331:5;20296:22;:41::i;:::-;20240:127;;20456:8;20437:6;:16;;;:27;:57;;20478:6;:16;;;20437:57;;;20467:8;20430:64;-1:-1:-1;;;;;19912:589:42:o;13761:161::-;875:33:22;888:10;900:7;;;;875:12;:33::i;:::-;867:58;;;;;;;9917:2:124;867:58:22;;;9899:21:124;9956:2;9936:18;;;9929:30;9995:14;9975:18;;;9968:42;10027:18;;867:58:22;9715:336:124;867:58:22;13890:15:42::1;:25:::0;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;13761:161::o;1496:434:22:-;1767:5;;;;1753:10;:19;;:76;;-1:-1:-1;1776:9:22;;:53;;;;;1794:10;1776:53;;;13824:34:124;1814:4:22;13874:18:124;;;13867:43;1776:9:22;1821:7;;;13926:18:124;;;13919:107;1776:9:22;;;;;:17;;13736:18:124;;1776:53:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1745:85;;;;;;1841:9;:24;;;;;;;;;;;;;1881:42;;1898:10;;1881:42;;-1:-1:-1;;1881:42:22;1496:434;:::o;21833:204:42:-;21890:4;21924:10;;;:5;:10;;;;;:18;;;;;3816:13;21960:25;;;21959:71;;22015:15;22004:7;:26;;21959:71;;;21989:12;;21959:71;21952:78;21833:204;-1:-1:-1;;;21833:204:42:o;17606:555::-;17713:13;17933:12;;;:7;:12;;;;;;;;17906:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18098:10;;;;;;;;;;:18;;;;17713:13;;;;;;;;;;17906:39;;;;18098:18;;18130:14;17933:12;18130:9;:14::i;:::-;17955:199;;;;-1:-1:-1;17955:199:42;;-1:-1:-1;17955:199:42;-1:-1:-1;17955:199:42;-1:-1:-1;17955:199:42;;-1:-1:-1;17606:555:42;-1:-1:-1;;;17606:555:42:o;14201:267::-;14281:12;;;;:7;:12;;;;;:18;;;14267:10;:32;14263:73;;14308:28;;;;;;;;;;;;;;14263:73;14346:10;;;;:5;:10;;;;;;;;:47;;;;;14377:15;14346:47;;;;;;14403:7;:12;;;;;;:21;;:25;;;14444:17;14346:10;;14444:17;;;14201:267;:::o;13964:195::-;875:33:22;888:10;900:7;;;;875:12;:33::i;:::-;867:58;;;;;;;9917:2:124;867:58:22;;;9899:21:124;9956:2;9936:18;;;9929:30;9995:14;9975:18;;;9968:42;10027:18;;867:58:22;9715:336:124;867:58:22;14114:28:42::1;::::0;;;::::1;;::::0;;;:18:::1;:28;::::0;;;;:38;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;13964:195::o;12193:199::-;12294:12;;;;:7;:12;;;;;:18;;;12280:10;:32;12276:73;;12321:28;;;;;;;;;;;;;;12276:73;12359:14;;;;:9;:14;;;;;;:26;;;;;;;;;;;;;;12193:199::o;19221:655::-;19460:25;;;;;:14;1312:55:124;;;19460:25:42;;;1294:74:124;-1:-1:-1;;;;19445:62:42;;19460:7;:14;;;;;;1267:18:124;;19460:25:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19445:7;;:62;;3882:3;19445:14;:62::i;:::-;19517:14;19557:10;;;:5;:10;;;;;;;:16;;19431:76;;-1:-1:-1;19517:14:42;19534:58;;19575:16;19563:3;19575:11;:16::i;:::-;19535:13;19545:3;19535:7;:13;:::i;:::-;19534:22;:58;:22;:58::i;:::-;19517:75;;19748:14;19758:3;19748:9;:14::i;:::-;19739:6;:23;19735:135;;;19785:30;;;;;;;;;;;;;;19735:135;19853:6;-1:-1:-1;19846:13:42;;-1:-1:-1;19846:13:42;20543:1248;20625:7;20818:24;20845:7;:12;20853:3;20845:12;;;;;;;;;;;20818:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20867:21;20891:5;:10;20897:3;20891:10;;;;;;;;;;;20867:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20911:13;20927:16;20939:3;20927:11;:16::i;:::-;20911:32;;20953:21;20977:6;:22;;;:108;;21074:10;;;;21044:15;;;;:41;;21067:5;;21044:22;:41::i;:::-;20977:108;;;21014:6;:15;;;20977:108;20953:132;;21095:16;21114:42;21138:5;21145:4;:10;;;21114:6;:16;;;:23;;:42;;;;;:::i;:::-;21095:61;;21166:22;21207:8;21191:13;:24;:51;;21234:8;21191:51;;;21218:13;21191:51;21669:25;;;;;:14;1312:55:124;;;21669:25:42;;;1294:74:124;21166:76:42;;-1:-1:-1;;;21634:103:42;;21669:7;:14;;;;;;1267:18:124;;21669:25:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21634:14;;:103;;3882:3;21634:21;:103::i;:::-;21611:126;-1:-1:-1;21755:29:42;21611:126;21755:14;:29;:::i;:::-;21748:36;20543:1248;-1:-1:-1;;;;;;;;;;20543:1248:42:o;14560:2152::-;14692:14;14722:10;:30;14744:7;14722:30;;14718:69;;14761:26;;;;;;;;;;;;;;14718:69;14798:25;14826:12;;;:7;:12;;;;;;;;14872:5;:10;;;;;;;14848:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14981:19;;;;14826:12;;14848:34;;14981:19;:33;;;;:70;;-1:-1:-1;15038:12:42;;;;15019:32;;;;:18;:32;;;;;;;;15018:33;14981:70;14977:121;;;15072:26;;;;;;;;;;;;;;14977:121;15164:11;15171:3;15164:6;:11::i;:::-;15159:53;;15184:28;;;;;;;;;;;;;;15159:53;15272:13;15288:16;15300:3;15288:11;:16::i;:::-;15586:10;;;;15272:32;;-1:-1:-1;15571:33:42;;:7;;15272:32;15571:14;:33::i;:::-;15562:42;;15689:13;15680:6;:22;15676:69;;;15711:34;;;;;;;;;;;;;;15676:69;15829:6;:16;;;15820:6;:25;15816:68;;;15854:30;;;;;;;;;;;;;;15816:68;16244:22;;;;;;;;;:77;;16306:6;:15;;;16297:6;:24;16244:77;;;16279:6;:15;;;16269:7;:25;16244:77;16240:132;;;16342:30;;;;;;;;;;;;;;16240:132;16466:22;;;;;;;;;:41;;16501:6;16466:41;;;16491:7;16466:41;16447:6;:15;;;:60;;;;;;;:::i;:::-;;;;;;;;16667:7;16647:6;:16;;;:27;;;;;;;:::i;:::-;;;;;;;;16699:6;16684;:11;;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;14560:2152:42;;;-1:-1:-1;;;;;;;14560:2152:42:o;13054:416::-;875:33:22;888:10;900:7;;;;875:12;:33::i;:::-;867:58;;;;;;;9917:2:124;867:58:22;;;9899:21:124;9956:2;9936:18;;;9929:30;9995:14;9975:18;;;9968:42;10027:18;;867:58:22;9715:336:124;867:58:22;13321:17:42::1;::::0;::::1;::::0;;;::::1;::::0;::::1;13302:36:::0;;::::1;;::::0;:66:::1;;;13361:7;13342:16;:26;;;13302:66;13298:117;;;13389:26;;;;;;;;;;;;;;13298:117;13426:18;:37:::0;;::::1;::::0;;::::1;;;::::0;;;::::1;::::0;;;::::1;::::0;;13054:416::o;950:540:22:-;1070:9;;1037:4;;1070:9;;1388:27;;;;;:77;;-1:-1:-1;1419:46:22;;;;;:12;13842:15:124;;;1419:46:22;;;13824:34:124;1446:4:22;13874:18:124;;;13867:43;13958:66;13946:79;;13926:18;;;13919:107;1419:12:22;;;;;13736:18:124;;1419:46:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1387:96;;;-1:-1:-1;1478:5:22;;;1470:13;;;1478:5;;1470:13;1387:96;1380:103;950:540;-1:-1:-1;;;;950:540:22:o;5171:353:62:-;5285:14;5320:25;5327:1;5330;5333:11;5320:6;:25::i;:::-;5311:34;;5411:1;5396:11;5383:25;;;;;:::i;:::-;5393:1;5390;5383:25;:29;5379:129;;;5449:17;5440:6;:26;5432:35;;;;;;5485:8;;5171:353;;;;;:::o;4764:3713:42:-;4999:15;;4834:7;;4999:15;;4994:62;;5023:33;;;;;;;;;;;;;;4994:62;5163:10;5144:30;;;;:18;:30;;;;;;;;5143:31;:69;;;;-1:-1:-1;5178:20:42;;;;:34;;;;5143:69;5139:124;;;5237:26;;;;;;;;;;;;;;5139:124;5353:1;5337:7;:13;;;:17;;;:52;;;;;5374:15;5358:7;:13;;;:31;;;5337:52;5333:107;;;5414:26;;;;;;;;;;;;;;5333:107;5568:19;;5589:18;;;;5541:67;;;;;:26;15087:15:124;;;5541:67:42;;;15069:34:124;15139:15;;;15119:18;;;15112:43;5522:16:42;;5541:11;:26;;;;14981:18:124;;5541:67:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5652:25;5680:17;;;:7;:17;;;;;;;;5707:25;;;;;;5722:10;5707:25;;;5762:18;;;;5742:17;;;:38;;5707:25;5742:38;;;;;;;;;5811:19;;5707:25;5790:18;;:40;;;;;;;;;;;;5862:20;;;;5840:19;;;;:42;;5917:23;;;;5892:48;;;;;;;;5840:42;;;;5892:48;;;;;;;;;;5968:16;;;;5950:15;;;:34;6116:15;;;;;;;6158:21;;;;5522:86;;-1:-1:-1;5680:17:42;;3882:3;6158:44;;;;;;;;:114;;;6242:7;:30;;;6218:54;;:7;:21;;;:54;;;6158:114;6141:175;;;6290:26;;;;;;;;;;;;;;6141:175;6347:21;;;;6326:18;;;:42;;;;;;;;;;;;6540:14;;;;6568:18;;;;6600:19;;-1:-1:-1;;;;;;6489:175:42;;6518:8;;6489:15;:175::i;:::-;6688:14;;;;6674:28;;;;;;;;;;;6712:21;;;:40;;;6762:10;;;:18;;;6896:30;;;;6430:234;;-1:-1:-1;6712:40:42;;-1:-1:-1;6762:18:42;-1:-1:-1;3882:3:42;6896:52;;;;;6892:91;;;6957:26;;;;;;;;;;;;;;6892:91;7064:141;7122:7;:30;;;3882:3;7100:52;;;;:::i;:::-;7064:5;;7092:61;;3882:3;7064:14;:141::i;:::-;7048:13;;;:157;7281:17;;7262:16;;;;7281:17;;;;;;;7262:36;;;;:96;;-1:-1:-1;7340:18:42;;;7314:23;;;;7340:18;;;;;;7314:44;;;7262:96;:154;;;;7400:7;:16;;;7374:42;;:7;:23;;;:42;;;7262:154;7245:215;;;7434:26;;;;;;;;;;;;;;7245:215;7534:16;7553:7;:23;;;:303;;7840:7;:16;;;7553:303;;;7591:234;7632:5;7655:156;7721:7;:21;;;3882:3;7699:43;;;;:::i;:::-;7655:5;;7691:52;;3882:3;7655:14;:156::i;:::-;7591:16;;;;;:234;:23;:234::i;:::-;7534:322;;7885:110;7922:7;:23;;;7914:32;;7968:7;:16;;;7960:25;;7885:8;:15;;:110;;;;;:::i;:::-;7866:16;;;:129;8054:15;;;;8039:12;;;:30;;;;;;;;;;;8094:13;;;;-1:-1:-1;;8094:18:42;;:60;;8141:7;:13;;;8094:60;;;8122:15;8094:60;8164:18;;;;;;;;;;;;8218:16;;;;8164:18;;-1:-1:-1;8210:24:42;;8164:18;8210:24;:::i;:::-;8192:42;;;;;;;;;;;;;8386:18;;;;;8344:19;;8419:15;;;;8287:157;;9355:27:124;;9337:46;;8287:157:42;;;;;;;;8314:8;;8287:157;;9310:18:124;8287:157:42;;;;;;;-1:-1:-1;8462:8:42;;4764:3713;-1:-1:-1;;;;;;;;4764:3713:42:o;742:4147:62:-;854:14;;;1420:6;1417:1;1414;1407:20;1460:1;1457;1453:9;1444:18;;1515:5;1511:2;1508:13;1500:5;1496:2;1492:14;1488:34;1479:43;;;1616:5;1625:1;1616:10;1612:203;;1668:1;1654:11;:15;1646:24;;;;;;-1:-1:-1;1729:23:62;;;;-1:-1:-1;1787:13:62;;1612:203;1954:5;1940:11;:19;1932:28;;;;;;2261:17;2345:11;2342:1;2339;2332:25;3784:1;2787;2753:31;;:35;;2752:51;;2909:22;;;;3765:1;:15;;3764:21;;4027:17;;;4023:21;;4016:28;4089:17;;;4085:21;;4078:28;4152:17;;;4148:21;;4141:28;4215:17;;;4211:21;;4204:28;4278:17;;;4274:21;;4267:28;4342:17;;;4338:21;;;4331:28;;;2737:12;3321;;;3317:23;;;3313:31;;;2490:20;;;2479:32;;;3380:12;;;;2537:21;;3053:16;;;;3371:21;;;;4834:11;;;-1:-1:-1;;;;742:4147:62:o;8483:3668:42:-;8697:7;8718;8739;8818:25;8846:12;:21;;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8818:51;;8879:24;8906:11;:20;;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8879:49;;8965:1;8943:19;:23;;;:51;;;;8992:2;8970:19;:24;;;8943:51;8939:90;;;9003:26;;;;;;;;;;;;;;8939:90;9064:1;9043:18;:22;;;:49;;;;9090:2;9069:18;:23;;;9043:49;9039:88;;;9101:26;;;;;;;;;;;;;;9039:88;9220:30;;;;;:67;;-1:-1:-1;9254:28:42;;;;:33;9220:67;9216:118;;;9308:26;;;;;;;;;;;;;;9216:118;9385:54;;;;;;;;15676:25:124;;;9385:22:42;15798:15:124;;;15778:18;;;15771:43;15850:15;;;15830:18;;;15823:43;9385:22:42;;;;;15649:18:124;;9385:54:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9548:25:42;;;;;;;;895::124;;;9525:20:42;;-1:-1:-1;9548:20:42;;;;-1:-1:-1;9548:20:42;;868:18:124;;9548:25:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9525:48;;9587:12;9603:1;9587:17;9583:58;;9613:28;;;;;;;;;;;;;;9583:58;9764:21;;;;;;;;895:25:124;;;9741:20:42;;9764:16;;;;;;868:18:124;;9764:21:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9741:44;;9816:1;9799:14;:18;;;:41;;;;9838:2;9821:14;:19;;;9799:41;9795:80;;;9849:26;;;;;;;;;;;;;;9795:80;10555:18;10576:213;10607:144;10654:36;10676:14;3882:3;10654:36;:::i;:::-;10607:12;;10646:45;;3882:3;10607:21;:144::i;:::-;10765:14;10576:17;:213::i;:::-;10555:234;-1:-1:-1;11151:14:42;10555:234;11151:14;:::i;:::-;11127:38;;11132:14;11127:38;;;;:60;;;;11185:2;11169:13;:18;;;11127:60;11123:111;;;11208:26;;;;;;;;;;;;;;11123:111;11511:24;11578:14;11553:17;11569:1;11553:13;:17;:::i;:::-;11548:22;;:2;:22;:::i;:::-;:45;;;;:::i;:::-;11538:56;;:2;:56;:::i;:::-;11511:83;-1:-1:-1;11950:13:42;12050:17;12066:1;12050:13;:17;:::i;:::-;12028:18;11990:30;12000:19;11990:2;:30;:::i;:::-;:57;;;;:::i;:::-;:77;;;;:::i;:::-;11966:102;;:2;:102;:::i;:::-;11950:118;-1:-1:-1;12087:31:42;12102:16;12087:12;:31;:::i;:::-;12079:65;12120:16;;-1:-1:-1;12120:16:42;-1:-1:-1;8483:3668:42;-1:-1:-1;;;;;;;;;;;8483:3668:42:o;17023:484::-;17110:4;17126:13;17149:90;17166:2;17156:6;:12;17149:90;;17193:11;17202:2;17193:6;:11;:::i;:::-;17184:20;-1:-1:-1;17218:10:42;;;;:::i;:::-;;;;17149:90;;;17470:30;17486:13;17470:8;:30;:::i;14:180:124:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:124;;14:180;-1:-1:-1;14:180:124:o;199:154::-;285:42;278:5;274:54;267:5;264:65;254:93;;343:1;340;333:12;358:134;426:20;;455:31;426:20;455:31;:::i;:::-;358:134;;;:::o;497:247::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;664:9;651:23;683:31;708:5;683:31;:::i;1379:125::-;1464:14;1457:5;1453:26;1446:5;1443:37;1433:65;;1494:1;1491;1484:12;1509:132;1576:20;;1605:30;1576:20;1605:30;:::i;1646:245::-;1704:6;1757:2;1745:9;1736:7;1732:23;1728:32;1725:52;;;1773:1;1770;1763:12;1725:52;1812:9;1799:23;1831:30;1855:5;1831:30;:::i;1896:591::-;1966:6;1974;2027:2;2015:9;2006:7;2002:23;1998:32;1995:52;;;2043:1;2040;2033:12;1995:52;2083:9;2070:23;2112:18;2153:2;2145:6;2142:14;2139:34;;;2169:1;2166;2159:12;2139:34;2207:6;2196:9;2192:22;2182:32;;2252:7;2245:4;2241:2;2237:13;2233:27;2223:55;;2274:1;2271;2264:12;2223:55;2314:2;2301:16;2340:2;2332:6;2329:14;2326:34;;;2356:1;2353;2346:12;2326:34;2401:7;2396:2;2387:6;2383:2;2379:15;2375:24;2372:37;2369:57;;;2422:1;2419;2412:12;2369:57;2453:2;2445:11;;;;;2475:6;;-1:-1:-1;1896:591:124;;-1:-1:-1;;;;1896:591:124:o;2492:118::-;2578:5;2571:13;2564:21;2557:5;2554:32;2544:60;;2600:1;2597;2590:12;2615:128;2680:20;;2709:28;2680:20;2709:28;:::i;2748:241::-;2804:6;2857:2;2845:9;2836:7;2832:23;2828:32;2825:52;;;2873:1;2870;2863:12;2825:52;2912:9;2899:23;2931:28;2953:5;2931:28;:::i;3225:320::-;3317:6;3325;3378:3;3366:9;3357:7;3353:23;3349:33;3346:53;;;3395:1;3392;3385:12;3346:53;3431:9;3418:23;3408:33;;3477:7;3471:3;3460:9;3456:19;3453:32;3450:52;;;3498:1;3495;3488:12;3450:52;-1:-1:-1;3225:320:124;3536:2;3521:18;;;;;-1:-1:-1;3225:320:124:o;5652:382::-;5717:6;5725;5778:2;5766:9;5757:7;5753:23;5749:32;5746:52;;;5794:1;5791;5784:12;5746:52;5833:9;5820:23;5852:31;5877:5;5852:31;:::i;:::-;5902:5;-1:-1:-1;5959:2:124;5944:18;;5931:32;5972:30;5931:32;5972:30;:::i;:::-;6021:7;6011:17;;;5652:382;;;;;:::o;6039:315::-;6107:6;6115;6168:2;6156:9;6147:7;6143:23;6139:32;6136:52;;;6184:1;6181;6174:12;6136:52;6220:9;6207:23;6197:33;;6280:2;6269:9;6265:18;6252:32;6293:31;6318:5;6293:31;:::i;6359:184::-;6411:77;6408:1;6401:88;6508:4;6505:1;6498:15;6532:4;6529:1;6522:15;6548:247;6615:2;6609:9;6657:3;6645:16;;6691:18;6676:34;;6712:22;;;6673:62;6670:88;;;6738:18;;:::i;:::-;6774:2;6767:22;6548:247;:::o;6800:935::-;6881:6;6934:3;6922:9;6913:7;6909:23;6905:33;6902:53;;;6951:1;6948;6941:12;6902:53;7000:7;6993:4;6982:9;6978:20;6974:34;6964:62;;7022:1;7019;7012:12;6964:62;7055:2;7049:9;7097:3;7089:6;7085:16;7167:6;7155:10;7152:22;7131:18;7119:10;7116:34;7113:62;7110:88;;;7178:18;;:::i;:::-;7214:2;7207:22;7249:6;7293:3;7278:19;;7309;;;7306:39;;;7341:1;7338;7331:12;7306:39;7365:9;7383:321;7399:6;7394:3;7391:15;7383:321;;;7481:3;7468:17;7529:10;7522:5;7518:22;7511:5;7508:33;7498:131;;7583:1;7612:2;7608;7601:14;7498:131;7642:18;;7689:4;7680:14;;;;7416;7383:321;;;-1:-1:-1;7723:6:124;;6800:935;-1:-1:-1;;;;;6800:935:124:o;7740:383::-;7817:6;7825;7833;7886:2;7874:9;7865:7;7861:23;7857:32;7854:52;;;7902:1;7899;7892:12;7854:52;7938:9;7925:23;7915:33;;7995:2;7984:9;7980:18;7967:32;7957:42;;8049:2;8038:9;8034:18;8021:32;8062:31;8087:5;8062:31;:::i;:::-;8112:5;8102:15;;;7740:383;;;;;:::o;9394:316::-;9471:6;9479;9487;9540:2;9528:9;9519:7;9515:23;9511:32;9508:52;;;9556:1;9553;9546:12;9508:52;-1:-1:-1;;9579:23:124;;;9649:2;9634:18;;9621:32;;-1:-1:-1;9700:2:124;9685:18;;;9672:32;;9394:316;-1:-1:-1;9394:316:124:o;10056:184::-;10126:6;10179:2;10167:9;10158:7;10154:23;10150:32;10147:52;;;10195:1;10192;10185:12;10147:52;-1:-1:-1;10218:16:124;;10056:184;-1:-1:-1;10056:184:124:o;10245:::-;10297:77;10294:1;10287:88;10394:4;10391:1;10384:15;10418:4;10415:1;10408:15;10434:228;10474:7;10600:1;10532:66;10528:74;10525:1;10522:81;10517:1;10510:9;10503:17;10499:105;10496:131;;;10607:18;;:::i;:::-;-1:-1:-1;10647:9:124;;10434:228::o;10667:225::-;10706:4;10735:14;10799:10;;;;10769;;10821:12;;;10818:38;;;10836:18;;:::i;:::-;10873:13;;10667:225;-1:-1:-1;;;10667:225:124:o;10897:1148::-;10987:6;11040:3;11028:9;11019:7;11015:23;11011:33;11008:53;;;11057:1;11054;11047:12;11008:53;11083:17;;:::i;:::-;11123:29;11142:9;11123:29;:::i;:::-;11116:5;11109:44;11185:38;11219:2;11208:9;11204:18;11185:38;:::i;:::-;11180:2;11173:5;11169:14;11162:62;11256:38;11290:2;11279:9;11275:18;11256:38;:::i;:::-;11251:2;11244:5;11240:14;11233:62;11327:38;11361:2;11350:9;11346:18;11327:38;:::i;:::-;11322:2;11315:5;11311:14;11304:62;11399:38;11432:3;11421:9;11417:19;11399:38;:::i;:::-;11393:3;11386:5;11382:15;11375:63;11471:38;11504:3;11493:9;11489:19;11471:38;:::i;:::-;11465:3;11458:5;11454:15;11447:63;11543:36;11574:3;11563:9;11559:19;11543:36;:::i;:::-;11537:3;11530:5;11526:15;11519:61;11641:3;11630:9;11626:19;11613:33;11607:3;11600:5;11596:15;11589:58;11666:3;11701:37;11734:2;11723:9;11719:18;11701:37;:::i;:::-;11685:14;;;11678:61;11758:3;11793:37;11811:18;;;11793:37;:::i;:::-;11777:14;;;11770:61;11850:3;11885:37;11903:18;;;11885:37;:::i;:::-;11869:14;;;11862:61;11942:3;11977:37;11995:18;;;11977:37;:::i;:::-;11961:14;;;11954:61;11965:5;10897:1148;-1:-1:-1;;;10897:1148:124:o;12050:184::-;12102:77;12099:1;12092:88;12199:4;12196:1;12189:15;12223:4;12220:1;12213:15;12239:195;12278:1;12304:14;12345:2;12342:1;12338:10;12367:3;12357:37;;12374:18;;:::i;:::-;12412:10;;12408:20;;;;;12239:195;-1:-1:-1;;12239:195:124:o;12439:266::-;12478:7;12510:14;12551:2;12548:1;12544:10;12581:2;12578:1;12574:10;12637:3;12633:2;12629:12;12624:3;12621:21;12614:3;12607:11;12600:19;12596:47;12593:73;;;12646:18;;:::i;:::-;12686:13;;12439:266;-1:-1:-1;;;;12439:266:124:o;12710:232::-;12749:3;12777:14;12818:2;12815:1;12811:10;12848:2;12845:1;12841:10;12879:3;12875:2;12871:12;12866:3;12863:21;12860:47;;;12887:18;;:::i;:::-;12923:13;;12710:232;-1:-1:-1;;;;12710:232:124:o;13283:275::-;13377:6;13430:2;13418:9;13409:7;13405:23;13401:32;13398:52;;;13446:1;13443;13436:12;13398:52;13478:9;13472:16;13497:31;13522:5;13497:31;:::i;14037:245::-;14104:6;14157:2;14145:9;14136:7;14132:23;14128:32;14125:52;;;14173:1;14170;14163:12;14125:52;14205:9;14199:16;14224:28;14246:5;14224:28;:::i;14287:249::-;14356:6;14409:2;14397:9;14388:7;14384:23;14380:32;14377:52;;;14425:1;14422;14415:12;14377:52;14457:9;14451:16;14476:30;14500:5;14476:30;:::i;14541:125::-;14581:4;14609:1;14606;14603:8;14600:34;;;14614:18;;:::i;:::-;-1:-1:-1;14651:9:124;;14541:125::o;14671:128::-;14711:3;14742:1;14738:6;14735:1;14732:13;14729:39;;;14748:18;;:::i;:::-;-1:-1:-1;14784:9:124;;14671:128::o;15166:273::-;15234:6;15287:2;15275:9;15266:7;15262:23;15258:32;15255:52;;;15303:1;15300;15293:12;15255:52;15335:9;15329:16;15385:4;15378:5;15374:16;15367:5;15364:27;15354:55;;15405:1;15402;15395:12;15877:237;15910:3;15957:5;15954:1;15943:20;15987:66;15978:7;15975:79;15972:105;;16057:18;;:::i;:::-;16097:1;16093:15;;15877:237;-1:-1:-1;;15877:237:124:o;16119:388::-;16156:1;16197;16194;16183:16;16233:1;16230;16219:16;16254:3;16244:37;;16261:18;;:::i;:::-;16382:66;16377:3;16374:75;16305:66;16300:3;16297:75;16293:157;16290:183;;;16453:18;;:::i;:::-;16487:14;;;16119:388;-1:-1:-1;;;16119:388:124:o;16512:391::-;16549:4;16593:1;16590;16579:16;16629:1;16626;16615:16;16659:1;16654:3;16650:11;16770:3;16702:66;16698:76;16693:3;16689:86;16684:2;16677:10;16673:103;16670:129;;;16779:18;;:::i;:::-;16838:3;16832:4;16828:14;16823:3;16819:24;16815:2;16811:33;16808:59;;;16847:18;;:::i;:::-;-1:-1:-1;16884:13:124;;;16512:391;-1:-1:-1;;;16512:391:124:o;16908:482::-;16997:1;17040:5;16997:1;17054:330;17075:7;17065:8;17062:21;17054:330;;;17194:4;17126:66;17122:77;17116:4;17113:87;17110:113;;;17203:18;;:::i;:::-;17253:7;17243:8;17239:22;17236:55;;;17273:16;;;;17236:55;17352:22;;;;17312:15;;;;17054:330;;;17058:3;16908:482;;;;;:::o;17395:866::-;17444:5;17474:8;17464:80;;-1:-1:-1;17515:1:124;17529:5;;17464:80;17563:4;17553:76;;-1:-1:-1;17600:1:124;17614:5;;17553:76;17645:4;17663:1;17658:59;;;;17731:1;17726:130;;;;17638:218;;17658:59;17688:1;17679:10;;17702:5;;;17726:130;17763:3;17753:8;17750:17;17747:43;;;17770:18;;:::i;:::-;-1:-1:-1;;17826:1:124;17812:16;;17841:5;;17638:218;;17940:2;17930:8;17927:16;17921:3;17915:4;17912:13;17908:36;17902:2;17892:8;17889:16;17884:2;17878:4;17875:12;17871:35;17868:77;17865:159;;;-1:-1:-1;17977:19:124;;;18009:5;;17865:159;18056:34;18081:8;18075:4;18056:34;:::i;:::-;18186:6;18118:66;18114:79;18105:7;18102:92;18099:118;;;18197:18;;:::i;:::-;18235:20;;17395:866;-1:-1:-1;;;17395:866:124:o;18266:140::-;18324:5;18353:47;18394:4;18384:8;18380:19;18374:4;18353:47;:::i;18411:389::-;18448:3;18491:1;18488;18477:16;18527:1;18524;18513:16;18557:1;18552:3;18548:11;18606:3;18600:4;18596:14;18591:3;18587:24;18582:2;18575:10;18571:41;18568:67;;;18615:18;;:::i;:::-;18736:3;18668:66;18664:76;18659:3;18655:86;18651:2;18647:95;18644:121;;;18745:18;;:::i;:::-;-1:-1:-1;18781:13:124;;18411:389;-1:-1:-1;;;18411:389:124:o;18805:120::-;18845:1;18871;18861:35;;18876:18;;:::i;:::-;-1:-1:-1;18910:9:124;;18805:120::o;18930:178::-;18966:3;19013:5;19010:1;18999:20;19043:4;19034:7;19031:17;19028:43;;19051:18;;:::i;:::-;19100:1;19087:15;;18930:178;-1:-1:-1;;18930:178:124:o",
    "linkReferences": {},
    "immutableReferences": {
      "36521": [
        {
          "start": 686,
          "length": 32
        },
        {
          "start": 9647,
          "length": 32
        }
      ],
      "36524": [
        {
          "start": 1119,
          "length": 32
        },
        {
          "start": 3747,
          "length": 32
        },
        {
          "start": 6344,
          "length": 32
        },
        {
          "start": 7562,
          "length": 32
        },
        {
          "start": 7742,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "allowNewMarkets()": "afa9d3b0",
    "authority()": "bf7e214f",
    "callbackAuthorized(address)": "5dc4d16b",
    "closeMarket(uint256)": "ae418095",
    "createMarket(bytes)": "53c7f8e0",
    "currentCapacity(uint256)": "1c063a6c",
    "getAggregator()": "3ad59dbc",
    "getMarketInfoForPurchase(uint256)": "acc5570c",
    "getTeller()": "9787d107",
    "isInstantSwap(uint256)": "8b098db3",
    "isLive(uint256)": "27507458",
    "marketPrice(uint256)": "3adec5a7",
    "marketScale(uint256)": "946824cd",
    "markets(uint256)": "b1283e77",
    "maxAmountAccepted(uint256,address)": "c7bf8ca0",
    "maxPayout(uint256)": "57e333ba",
    "minDepositInterval()": "d2040687",
    "minMarketDuration()": "d2bee323",
    "newOwners(uint256)": "6729a41e",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "payoutFor(uint256,uint256,address)": "bf48582b",
    "pullOwnership(uint256)": "10b05317",
    "purchaseBond(uint256,uint256,uint256)": "e007fa97",
    "pushOwnership(uint256,address)": "bcf6cde8",
    "setAllowNewMarkets(bool)": "5f77274e",
    "setAuthority(address)": "7a9e5e4b",
    "setCallbackAuthStatus(address,bool)": "bbbdd95a",
    "setDefaults(uint32[6])": "bd1f3a5e",
    "setIntervals(uint256,uint32[3])": "699e17d9",
    "setMinDepositInterval(uint48)": "f61338f6",
    "setMinMarketDuration(uint48)": "44ee0172",
    "setOwner(address)": "13af4035",
    "terms(uint256)": "c0aa0e8a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBondTeller\",\"name\":\"teller_\",\"type\":\"address\"},{\"internalType\":\"contract IBondAggregator\",\"name\":\"aggregator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"},{\"internalType\":\"contract Authority\",\"name\":\"authority_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Auctioneer_AmountLessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_BadExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_InvalidCallback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_MarketNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_MaxPayoutExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_NewMarketsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_NotEnoughCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_OnlyMarketOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auctioneer_OraclePriceZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MarketClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowNewMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callbackAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"closeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params_\",\"type\":\"bytes\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"currentCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"contract IBondAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getMarketInfoForPurchase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeller\",\"outputs\":[{\"internalType\":\"contract IBondTeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"isInstantSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"marketScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"}],\"name\":\"maxAmountAccepted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositInterval\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketDuration\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"pullOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut_\",\"type\":\"uint256\"}],\"name\":\"purchaseBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setAllowNewMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setCallbackAuthStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[6]\",\"name\":\"defaults_\",\"type\":\"uint32[6]\"}],\"name\":\"setDefaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint32[3]\",\"name\":\"intervals_\",\"type\":\"uint32[3]\"}],\"name\":\"setIntervals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"depositInterval_\",\"type\":\"uint48\"}],\"name\":\"setMinDepositInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"duration_\",\"type\":\"uint48\"}],\"name\":\"setMinMarketDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"contract IBondOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"fixedDiscount\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleConversion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Oighty\",\"details\":\"Bond Protocol is a permissionless system to create bond markets      for any token pair. Bond issuers create BondMarkets that pay out      a Payout Token in exchange for deposited Quote Tokens. Users can purchase      future-dated Payout Tokens with Quote Tokens at the current market price and      receive Bond Tokens to represent their position while their bond vests.      Once the Bond Tokens vest, they can redeem it for the Quote Tokens.An Auctioneer contract allows users to create and manage bond markets.      All bond pricing logic and market data is stored in the Auctioneer.      An Auctioneer is dependent on a Teller to serve external users and      an Aggregator to register new markets. The Fixed Discount Auctioneer      lets issuers set a Fixed Discount to an oracle price to buy a      target amount of quote tokens or sell a target amount of payout tokens      over the duration of a market.      See IBondOFDA.sol for price format details.The Fixed-Expiry Fixed Discount Auctioneer is an implementation of the      Bond Base Fixed Discount Auctioneer contract specific to creating bond markets where      all purchases on that market vest at a certain timestamp.\",\"kind\":\"dev\",\"methods\":{\"closeMarket(uint256)\":{\"params\":{\"id_\":\"ID of market to close\"}},\"createMarket(bytes)\":{\"details\":\"See specific auctioneer implementations for details on encoding the parameters.\",\"params\":{\"params_\":\"Configuration data needed for market creation, encoded in a bytes array\"},\"returns\":{\"_0\":\"id              ID of new bond market\"}},\"getMarketInfoForPurchase(uint256)\":{\"params\":{\"id_\":\"Market ID\"},\"returns\":{\"callbackAddr\":\"   Address of the callback contract to get tokens for payouts\",\"maxPayout_\":\"      Maximum amount of payout tokens you can purchase in one transaction\",\"owner\":\"          Address of the market owner (tokens transferred from this address if no callback)\",\"payoutToken\":\"    Payout Token (token paid out) for the Market\",\"quoteToken\":\"     Quote Token (token received) for the Market\",\"vesting\":\"        Timestamp or duration for vesting, implementation-dependent\"}},\"isInstantSwap(uint256)\":{\"params\":{\"id_\":\"Market ID to search for\"}},\"isLive(uint256)\":{\"params\":{\"id_\":\"ID of market\"}},\"marketPrice(uint256)\":{\"params\":{\"id_\":\"ID of market\"},\"returns\":{\"_0\":\"Price for market in configured decimals\"}},\"marketScale(uint256)\":{\"params\":{\"id_\":\"ID of market\"},\"returns\":{\"_0\":\"Scaling factor for market in configured decimals\"}},\"maxAmountAccepted(uint256,address)\":{\"params\":{\"id_\":\"ID of market\",\"referrer_\":\"Address of referrer, used to get fees to calculate accurate payout amount.                     Inputting the zero address will take into account just the protocol fee.\"}},\"maxPayout(uint256)\":{\"details\":\"Returns a dynamically calculated payout or the maximum set by the creator, whichever is less.\",\"params\":{\"id_\":\"ID of market\"},\"returns\":{\"_0\":\"Current max payout for the market in payout tokens\"}},\"ownerOf(uint256)\":{\"params\":{\"id_\":\"ID of market\"}},\"payoutFor(uint256,uint256,address)\":{\"details\":\"Accounts for debt and control variable decay so it is up to date\",\"params\":{\"amount_\":\"Amount of quote tokens to spend\",\"id_\":\"ID of market\",\"referrer_\":\"Address of referrer, used to get fees to calculate accurate payout amount.                     Inputting the zero address will take into account just the protocol fee.\"},\"returns\":{\"_0\":\"amount of payout tokens to be paid\"}},\"pullOwnership(uint256)\":{\"details\":\"The existing owner must call pushOwnership prior to the newOwner calling this function\",\"params\":{\"id_\":\"Market ID\"}},\"purchaseBond(uint256,uint256,uint256)\":{\"params\":{\"amount_\":\"Amount to deposit in exchange for bond (after fee has been deducted)\",\"id_\":\"ID of the Market the bond is being purchased from\",\"minAmountOut_\":\"Minimum acceptable amount of bond to receive. Prevents frontrunning\"},\"returns\":{\"payout\":\"         Amount of payout token to be received from the bond\"}},\"pushOwnership(uint256,address)\":{\"details\":\"Doesn't change permissions until newOwner calls pullOwnership\",\"params\":{\"id_\":\"Market ID\",\"newOwner_\":\"New address to give ownership to\"}},\"setAllowNewMarkets(bool)\":{\"details\":\"Setting to false and allowing active markets to end will sunset the auctioneer\",\"params\":{\"status_\":\"Allow market creation (true) : Disallow market creation (false)\"}},\"setCallbackAuthStatus(address,bool)\":{\"details\":\"Callback is believed to be safe, but a whitelist is implemented to prevent abuse\",\"params\":{\"creator_\":\"Address of market creator\",\"status_\":\"Allow callback (true) : Disallow callback (false)\"}},\"setDefaults(uint32[6])\":{\"details\":\"The defaults set here are important to avoid edge cases in market behavior, e.g. a very short market reacts doesn't tune wellOnly applies to new markets that are created after the change\",\"params\":{\"defaults_\":\"Array of default values                     1. Tune interval - amount of time between tuning adjustments                     2. Tune adjustment delay - amount of time to apply downward tuning adjustments                     3. Minimum debt decay interval - minimum amount of time to let debt decay to zero                     4. Minimum deposit interval - minimum amount of time to wait between deposits                     5. Minimum market duration - minimum amount of time a market can be created for                     6. Minimum debt buffer - the minimum amount of debt over the initial debt to trigger a market shutdown\"}},\"setIntervals(uint256,uint32[3])\":{\"details\":\"Changing the intervals could cause markets to behave in unexpected way                                 tuneInterval should be greater than tuneAdjustmentDelay\",\"params\":{\"id_\":\"Market ID\",\"intervals_\":\"Array of intervals (3)                                 1. Tune interval - Frequency of tuning                                 2. Tune adjustment delay - Time to implement downward tuning adjustments                                 3. Debt decay interval - Interval over which debt should decay completely\"}},\"setMinDepositInterval(uint48)\":{\"params\":{\"depositInterval_\":\"Minimum deposit interval in seconds\"}},\"setMinMarketDuration(uint48)\":{\"params\":{\"duration_\":\"Minimum market duration in seconds\"}}},\"title\":\"Bond Fixed-Expiry Fixed Discount Auctioneer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowNewMarkets()\":{\"notice\":\"Whether or not the auctioneer allows new markets to be created\"},\"callbackAuthorized(address)\":{\"notice\":\"Whether or not the market creator is authorized to use a callback address\"},\"closeMarket(uint256)\":{\"notice\":\"Disable existing bond marketMust be market owner\"},\"createMarket(bytes)\":{\"notice\":\"Creates a new bond market\"},\"currentCapacity(uint256)\":{\"notice\":\"Returns current capacity of a market\"},\"getAggregator()\":{\"notice\":\"Returns the Aggregator that services the Auctioneer\"},\"getMarketInfoForPurchase(uint256)\":{\"notice\":\"Provides information for the Teller to execute purchases on a Market\"},\"getTeller()\":{\"notice\":\"Returns the Teller that services the Auctioneer\"},\"isInstantSwap(uint256)\":{\"notice\":\"Does market send payout immediately\"},\"isLive(uint256)\":{\"notice\":\"Is a given market accepting deposits\"},\"marketPrice(uint256)\":{\"notice\":\"Calculate current market price of payout token in quote tokens\"},\"marketScale(uint256)\":{\"notice\":\"Scale value to use when converting between quote token and payout token amounts with marketPrice()\"},\"markets(uint256)\":{\"notice\":\"Information pertaining to bond markets\"},\"maxAmountAccepted(uint256,address)\":{\"notice\":\"Returns maximum amount of quote token accepted by the market\"},\"maxPayout(uint256)\":{\"notice\":\"Calculate max payout of the market in payout tokens\"},\"minDepositInterval()\":{\"notice\":\"Minimum deposit interval for a market\"},\"minMarketDuration()\":{\"notice\":\"Minimum market duration in seconds\"},\"newOwners(uint256)\":{\"notice\":\"New address to designate as market owner. They must accept ownership to transfer permissions.\"},\"ownerOf(uint256)\":{\"notice\":\"Returns the address of the market owner\"},\"payoutFor(uint256,uint256,address)\":{\"notice\":\"Payout due for amount of quote tokens\"},\"pullOwnership(uint256)\":{\"notice\":\"Accept ownership of a marketMust be market newOwner\"},\"purchaseBond(uint256,uint256,uint256)\":{\"notice\":\"Exchange quote tokens for a bond in a specified marketMust be teller\"},\"pushOwnership(uint256,address)\":{\"notice\":\"Designate a new owner of a marketMust be market owner\"},\"setAllowNewMarkets(bool)\":{\"notice\":\"Change the status of the auctioneer to allow creation of new markets\"},\"setCallbackAuthStatus(address,bool)\":{\"notice\":\"Change whether a market creator is allowed to use a callback address in their markets or notMust be guardian\"},\"setDefaults(uint32[6])\":{\"notice\":\"Set the auctioneer defaultsMust be policy\"},\"setIntervals(uint256,uint32[3])\":{\"notice\":\"Set market intervals to different values than the defaultsMust be market owner\"},\"setMinDepositInterval(uint48)\":{\"notice\":\"Set the minimum deposit intervalAccess controlled\"},\"setMinMarketDuration(uint48)\":{\"notice\":\"Set the minimum market durationAccess controlled\"},\"terms(uint256)\":{\"notice\":\"Information pertaining to market vesting and duration\"}},\"notice\":\"Bond Fixed-Expiry Fixed Discount Auctioneer Contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BondFixedExpiryOFDA.sol\":\"BondFixedExpiryOFDA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":clones/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solidity-code-metrics/=node_modules/solidity-code-metrics/\",\":solmate/=lib/solmate/src/\",\":weird-erc20/=lib/solmate/lib/weird-erc20/src/\"]},\"sources\":{\"lib/clones-with-immutable-args/src/Clone.sol\":{\"keccak256\":\"0x8f569b077d99ec821c2750c52094b59b3505fb6ca3e6eac9009092bf86c5452d\",\"license\":\"BSD\",\"urls\":[\"bzz-raw://d0f3966d1f97959f6512ee5bc4b73487bf5ce593880e3c1dbf97ed50d49402a0\",\"dweb:/ipfs/QmSAtFtA28Mja6f6FfET26B38XEgrLgqRezNLo3AsXyjVB\"]},\"lib/solmate/src/auth/Auth.sol\":{\"keccak256\":\"0x45a3dedcffe229eb4393a1ac5233da3d332cddae4cf97fc44602614329c1f70a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7c68f29850ecef367a8075517c1cde2e0566793df30fc642cfbb74354681f59a\",\"dweb:/ipfs/QmStrjT3FoSNo8mXfqkPqppxyqbVtru2wQnE1qt9bc1UXE\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://49a39e71d6bde571d04722c90fd42591af806d29d8cbd4cd96f35e443702d899\",\"dweb:/ipfs/QmefLxMt6w2it9daQQFdBTtPeCWDhSqhNWuxQy8e7WrNVr\"]},\"src/BondFixedExpiryOFDA.sol\":{\"keccak256\":\"0x5049457355a4f477ed2d885ba952fa89268acb609553f7d56a55bdc7ee144918\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://b11fbb67e243ee646e56cb70bcfa82b3405e36f810b5de8d8c55f5ad4dc5bc84\",\"dweb:/ipfs/QmZTfoRCWaCx6Hi819kBKfv2tG2giDaReePZSUSx9Maugi\"]},\"src/ERC20BondToken.sol\":{\"keccak256\":\"0x14b11e975c3fb2f8aee2962e46aa1ab7c3ba145351f1c8f26e7f234fba9f4410\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://b766eb91df473cd1be260b7ab4198eaef69e6f71f01572e113efb67043d11279\",\"dweb:/ipfs/QmSkaFo1ciHD7Dbdt5u8uinQdtmNg9GWCwFpcsuwb4R5HF\"]},\"src/bases/BondBaseOFDA.sol\":{\"keccak256\":\"0xea7fe20c43f00def3f676311ec9886935c59250e68f6e42a78e39ec995b09045\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://29f6a9d3dd9ff4d192244f8fa93663c7e669772dd59ae3cf67d268e0953b5255\",\"dweb:/ipfs/QmQZDcTwq3JYRK1vUCPD9xuzKYDeQk86ZExynut7zwAVn9\"]},\"src/interfaces/IBondAggregator.sol\":{\"keccak256\":\"0xcbed51d7460ff8cf4d21f7ede6214af17b18dc4267c97b33989d657c84b732db\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://983965755356b317371609b20859cd2ca4c6493fa607d9dffaabb1d0cfd9dffb\",\"dweb:/ipfs/QmZJGhmKLLgi8wvBN6RrZF8y7sT6MgCYXx6NAM1bLqu5SU\"]},\"src/interfaces/IBondAuctioneer.sol\":{\"keccak256\":\"0x72842370a860a167633d01b6806db55d6db1011985d8186bd7947ed35d397c38\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://36c3eb05cd77617ce675871eb7b288ee6e9d75b60b82dbcf62667b08c37c2a8f\",\"dweb:/ipfs/QmcSddgbfTyfSZywcMDnWPsxs5nYgkBYBqzrEJWeEPzfT7\"]},\"src/interfaces/IBondCallback.sol\":{\"keccak256\":\"0x3d3883bc1365a89aed6362221cee2da26d5bd8e2a1e4a01b5134415948df5a3e\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://c16aa500c4aeaf62a3d46a93e8341b5a4c41ff3bdb203a15c465cd6dabf4f809\",\"dweb:/ipfs/QmaaQWiCbcxR5mUKKcjpWPDM8tqjBzbpvSzQfueG8yP4Bh\"]},\"src/interfaces/IBondFixedExpiryTeller.sol\":{\"keccak256\":\"0x4530df5a76e94da12895a0d1912388700b17bee34c6c71c3762c5ae8dd5bbfe1\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://c32dfd7b2803ec73451bba008ed427ce888215b0039e7a871247ed591d4ed373\",\"dweb:/ipfs/QmenLrALRdCMu8ttfyVwiSubM6vzCmAn1cL7vJgAcM76ag\"]},\"src/interfaces/IBondOFDA.sol\":{\"keccak256\":\"0x28dcea17caf38456523961bede9ad3fcac051c8daaff67bb789ecdc2193d48e0\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://e3ff270769f73e83b8a7daf3baf89ff96032d7af4e9bf5b55917969f869a18fb\",\"dweb:/ipfs/QmYgzN9XtW71HVsy6B2edWXzVYsH1MQ5YTwEKfzEnBRrUk\"]},\"src/interfaces/IBondOracle.sol\":{\"keccak256\":\"0x7a88cb925d998d049fee844aa714b2b6e8255475f2c5f0b309a5c9213f28d532\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://d0777ceee20b5aa166a35b0ecdb394f7abb36bbcbec48b5f885c92269a16ebcd\",\"dweb:/ipfs/QmQpMZEAMmzbo3b1jYfit7s4JHE2KjBd6DQxfaHC9tHNxC\"]},\"src/interfaces/IBondTeller.sol\":{\"keccak256\":\"0xb14fc9301858ec61abc52462699ced9f32478f1944b64c9398d811794d8769a1\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://9a6fb18f623109e285ce99f8be07969d3e50a235543ceb28b5dc620d606ea150\",\"dweb:/ipfs/QmXAz2yXoZQ6XzkS9mwPc7Dkj7kD3RyhW9rix7daVvxkMf\"]},\"src/lib/CloneERC20.sol\":{\"keccak256\":\"0x44cf60ce8aab43c31e8b6641c417e6a26c3242847c267435906ddb46b37b82c4\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f8867033f95983416889a931bfe0396c29be883d62a8330668fadeb06b937fdf\",\"dweb:/ipfs/QmUUKxS87nt3mxZuwCMZrMgLBco3ZRcz4p69hVPuZ7RJ3h\"]},\"src/lib/FullMath.sol\":{\"keccak256\":\"0x7804d45f19197ea7fd05fbaf2a78ef415cc670f90c50a19c7c3de644645d6139\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c87974ab119538463ac6c2aee7ef99bb63564f62bc21dd6317a355b627a8323\",\"dweb:/ipfs/QmU5ptUahKDuX9T39BWbPzqpJFaLAiaauXghHGjoLk6nEg\"]},\"src/lib/TransferHelper.sol\":{\"keccak256\":\"0x865961696dac7409544668120ea9b7720423a3198cb823378c9c244c50398c20\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://728f7439dc495dc64969f047293d36235ba0b72da49f02c11a7816c5ef67a2eb\",\"dweb:/ipfs/QmZDWkHA8hSshRVycoyNw8rhrtmbdqxE1Qb3Bbf6gQDwT4\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IBondTeller",
              "name": "teller_",
              "type": "address"
            },
            {
              "internalType": "contract IBondAggregator",
              "name": "aggregator_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "guardian_",
              "type": "address"
            },
            {
              "internalType": "contract Authority",
              "name": "authority_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_AmountLessThanMinimum"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_BadExpiry"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_InvalidCallback"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_InvalidParams"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_MarketNotActive"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_MaxPayoutExceeded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_NewMarketsNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_NotAuthorized"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_NotEnoughCapacity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_OnlyMarketOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Auctioneer_OraclePriceZero"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract Authority",
              "name": "newAuthority",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AuthorityUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "MarketClosed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "payoutToken",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "quoteToken",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint48",
              "name": "vesting",
              "type": "uint48",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MarketCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "allowNewMarkets",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "authority",
          "outputs": [
            {
              "internalType": "contract Authority",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "callbackAuthorized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "closeMarket"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "params_",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createMarket",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "currentCapacity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAggregator",
          "outputs": [
            {
              "internalType": "contract IBondAggregator",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getMarketInfoForPurchase",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "payoutToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "quoteToken",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "vesting",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTeller",
          "outputs": [
            {
              "internalType": "contract IBondTeller",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isInstantSwap",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isLive",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "marketPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "marketScale",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "markets",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "payoutToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "quoteToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "capacityInQuote",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "capacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchased",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer_",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxAmountAccepted",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxPayout",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "minDepositInterval",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "minMarketDuration",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "newOwners",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer_",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "payoutFor",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pullOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountOut_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "purchaseBond",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newOwner_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pushOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "status_",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAllowNewMarkets"
        },
        {
          "inputs": [
            {
              "internalType": "contract Authority",
              "name": "newAuthority",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAuthority"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "creator_",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "status_",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCallbackAuthStatus"
        },
        {
          "inputs": [
            {
              "internalType": "uint32[6]",
              "name": "defaults_",
              "type": "uint32[6]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaults"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id_",
              "type": "uint256"
            },
            {
              "internalType": "uint32[3]",
              "name": "intervals_",
              "type": "uint32[3]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setIntervals"
        },
        {
          "inputs": [
            {
              "internalType": "uint48",
              "name": "depositInterval_",
              "type": "uint48"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMinDepositInterval"
        },
        {
          "inputs": [
            {
              "internalType": "uint48",
              "name": "duration_",
              "type": "uint48"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMinMarketDuration"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "terms",
          "outputs": [
            {
              "internalType": "contract IBondOracle",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "start",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "conclusion",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "vesting",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "fixedDiscount",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "scale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleConversion",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "closeMarket(uint256)": {
            "params": {
              "id_": "ID of market to close"
            }
          },
          "createMarket(bytes)": {
            "details": "See specific auctioneer implementations for details on encoding the parameters.",
            "params": {
              "params_": "Configuration data needed for market creation, encoded in a bytes array"
            },
            "returns": {
              "_0": "id              ID of new bond market"
            }
          },
          "getMarketInfoForPurchase(uint256)": {
            "params": {
              "id_": "Market ID"
            },
            "returns": {
              "callbackAddr": "   Address of the callback contract to get tokens for payouts",
              "maxPayout_": "      Maximum amount of payout tokens you can purchase in one transaction",
              "owner": "          Address of the market owner (tokens transferred from this address if no callback)",
              "payoutToken": "    Payout Token (token paid out) for the Market",
              "quoteToken": "     Quote Token (token received) for the Market",
              "vesting": "        Timestamp or duration for vesting, implementation-dependent"
            }
          },
          "isInstantSwap(uint256)": {
            "params": {
              "id_": "Market ID to search for"
            }
          },
          "isLive(uint256)": {
            "params": {
              "id_": "ID of market"
            }
          },
          "marketPrice(uint256)": {
            "params": {
              "id_": "ID of market"
            },
            "returns": {
              "_0": "Price for market in configured decimals"
            }
          },
          "marketScale(uint256)": {
            "params": {
              "id_": "ID of market"
            },
            "returns": {
              "_0": "Scaling factor for market in configured decimals"
            }
          },
          "maxAmountAccepted(uint256,address)": {
            "params": {
              "id_": "ID of market",
              "referrer_": "Address of referrer, used to get fees to calculate accurate payout amount.                     Inputting the zero address will take into account just the protocol fee."
            }
          },
          "maxPayout(uint256)": {
            "details": "Returns a dynamically calculated payout or the maximum set by the creator, whichever is less.",
            "params": {
              "id_": "ID of market"
            },
            "returns": {
              "_0": "Current max payout for the market in payout tokens"
            }
          },
          "ownerOf(uint256)": {
            "params": {
              "id_": "ID of market"
            }
          },
          "payoutFor(uint256,uint256,address)": {
            "details": "Accounts for debt and control variable decay so it is up to date",
            "params": {
              "amount_": "Amount of quote tokens to spend",
              "id_": "ID of market",
              "referrer_": "Address of referrer, used to get fees to calculate accurate payout amount.                     Inputting the zero address will take into account just the protocol fee."
            },
            "returns": {
              "_0": "amount of payout tokens to be paid"
            }
          },
          "pullOwnership(uint256)": {
            "details": "The existing owner must call pushOwnership prior to the newOwner calling this function",
            "params": {
              "id_": "Market ID"
            }
          },
          "purchaseBond(uint256,uint256,uint256)": {
            "params": {
              "amount_": "Amount to deposit in exchange for bond (after fee has been deducted)",
              "id_": "ID of the Market the bond is being purchased from",
              "minAmountOut_": "Minimum acceptable amount of bond to receive. Prevents frontrunning"
            },
            "returns": {
              "payout": "         Amount of payout token to be received from the bond"
            }
          },
          "pushOwnership(uint256,address)": {
            "details": "Doesn't change permissions until newOwner calls pullOwnership",
            "params": {
              "id_": "Market ID",
              "newOwner_": "New address to give ownership to"
            }
          },
          "setAllowNewMarkets(bool)": {
            "details": "Setting to false and allowing active markets to end will sunset the auctioneer",
            "params": {
              "status_": "Allow market creation (true) : Disallow market creation (false)"
            }
          },
          "setCallbackAuthStatus(address,bool)": {
            "details": "Callback is believed to be safe, but a whitelist is implemented to prevent abuse",
            "params": {
              "creator_": "Address of market creator",
              "status_": "Allow callback (true) : Disallow callback (false)"
            }
          },
          "setDefaults(uint32[6])": {
            "details": "The defaults set here are important to avoid edge cases in market behavior, e.g. a very short market reacts doesn't tune wellOnly applies to new markets that are created after the change",
            "params": {
              "defaults_": "Array of default values                     1. Tune interval - amount of time between tuning adjustments                     2. Tune adjustment delay - amount of time to apply downward tuning adjustments                     3. Minimum debt decay interval - minimum amount of time to let debt decay to zero                     4. Minimum deposit interval - minimum amount of time to wait between deposits                     5. Minimum market duration - minimum amount of time a market can be created for                     6. Minimum debt buffer - the minimum amount of debt over the initial debt to trigger a market shutdown"
            }
          },
          "setIntervals(uint256,uint32[3])": {
            "details": "Changing the intervals could cause markets to behave in unexpected way                                 tuneInterval should be greater than tuneAdjustmentDelay",
            "params": {
              "id_": "Market ID",
              "intervals_": "Array of intervals (3)                                 1. Tune interval - Frequency of tuning                                 2. Tune adjustment delay - Time to implement downward tuning adjustments                                 3. Debt decay interval - Interval over which debt should decay completely"
            }
          },
          "setMinDepositInterval(uint48)": {
            "params": {
              "depositInterval_": "Minimum deposit interval in seconds"
            }
          },
          "setMinMarketDuration(uint48)": {
            "params": {
              "duration_": "Minimum market duration in seconds"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "allowNewMarkets()": {
            "notice": "Whether or not the auctioneer allows new markets to be created"
          },
          "callbackAuthorized(address)": {
            "notice": "Whether or not the market creator is authorized to use a callback address"
          },
          "closeMarket(uint256)": {
            "notice": "Disable existing bond marketMust be market owner"
          },
          "createMarket(bytes)": {
            "notice": "Creates a new bond market"
          },
          "currentCapacity(uint256)": {
            "notice": "Returns current capacity of a market"
          },
          "getAggregator()": {
            "notice": "Returns the Aggregator that services the Auctioneer"
          },
          "getMarketInfoForPurchase(uint256)": {
            "notice": "Provides information for the Teller to execute purchases on a Market"
          },
          "getTeller()": {
            "notice": "Returns the Teller that services the Auctioneer"
          },
          "isInstantSwap(uint256)": {
            "notice": "Does market send payout immediately"
          },
          "isLive(uint256)": {
            "notice": "Is a given market accepting deposits"
          },
          "marketPrice(uint256)": {
            "notice": "Calculate current market price of payout token in quote tokens"
          },
          "marketScale(uint256)": {
            "notice": "Scale value to use when converting between quote token and payout token amounts with marketPrice()"
          },
          "markets(uint256)": {
            "notice": "Information pertaining to bond markets"
          },
          "maxAmountAccepted(uint256,address)": {
            "notice": "Returns maximum amount of quote token accepted by the market"
          },
          "maxPayout(uint256)": {
            "notice": "Calculate max payout of the market in payout tokens"
          },
          "minDepositInterval()": {
            "notice": "Minimum deposit interval for a market"
          },
          "minMarketDuration()": {
            "notice": "Minimum market duration in seconds"
          },
          "newOwners(uint256)": {
            "notice": "New address to designate as market owner. They must accept ownership to transfer permissions."
          },
          "ownerOf(uint256)": {
            "notice": "Returns the address of the market owner"
          },
          "payoutFor(uint256,uint256,address)": {
            "notice": "Payout due for amount of quote tokens"
          },
          "pullOwnership(uint256)": {
            "notice": "Accept ownership of a marketMust be market newOwner"
          },
          "purchaseBond(uint256,uint256,uint256)": {
            "notice": "Exchange quote tokens for a bond in a specified marketMust be teller"
          },
          "pushOwnership(uint256,address)": {
            "notice": "Designate a new owner of a marketMust be market owner"
          },
          "setAllowNewMarkets(bool)": {
            "notice": "Change the status of the auctioneer to allow creation of new markets"
          },
          "setCallbackAuthStatus(address,bool)": {
            "notice": "Change whether a market creator is allowed to use a callback address in their markets or notMust be guardian"
          },
          "setDefaults(uint32[6])": {
            "notice": "Set the auctioneer defaultsMust be policy"
          },
          "setIntervals(uint256,uint32[3])": {
            "notice": "Set market intervals to different values than the defaultsMust be market owner"
          },
          "setMinDepositInterval(uint48)": {
            "notice": "Set the minimum deposit intervalAccess controlled"
          },
          "setMinMarketDuration(uint48)": {
            "notice": "Set the minimum market durationAccess controlled"
          },
          "terms(uint256)": {
            "notice": "Information pertaining to market vesting and duration"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "clones/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "solidity-code-metrics/=node_modules/solidity-code-metrics/",
        "solmate/=lib/solmate/src/",
        "weird-erc20/=lib/solmate/lib/weird-erc20/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 100000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/BondFixedExpiryOFDA.sol": "BondFixedExpiryOFDA"
      },
      "libraries": {}
    },
    "sources": {
      "lib/clones-with-immutable-args/src/Clone.sol": {
        "keccak256": "0x8f569b077d99ec821c2750c52094b59b3505fb6ca3e6eac9009092bf86c5452d",
        "urls": [
          "bzz-raw://d0f3966d1f97959f6512ee5bc4b73487bf5ce593880e3c1dbf97ed50d49402a0",
          "dweb:/ipfs/QmSAtFtA28Mja6f6FfET26B38XEgrLgqRezNLo3AsXyjVB"
        ],
        "license": "BSD"
      },
      "lib/solmate/src/auth/Auth.sol": {
        "keccak256": "0x45a3dedcffe229eb4393a1ac5233da3d332cddae4cf97fc44602614329c1f70a",
        "urls": [
          "bzz-raw://7c68f29850ecef367a8075517c1cde2e0566793df30fc642cfbb74354681f59a",
          "dweb:/ipfs/QmStrjT3FoSNo8mXfqkPqppxyqbVtru2wQnE1qt9bc1UXE"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/tokens/ERC20.sol": {
        "keccak256": "0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f",
        "urls": [
          "bzz-raw://49a39e71d6bde571d04722c90fd42591af806d29d8cbd4cd96f35e443702d899",
          "dweb:/ipfs/QmefLxMt6w2it9daQQFdBTtPeCWDhSqhNWuxQy8e7WrNVr"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/BondFixedExpiryOFDA.sol": {
        "keccak256": "0x5049457355a4f477ed2d885ba952fa89268acb609553f7d56a55bdc7ee144918",
        "urls": [
          "bzz-raw://b11fbb67e243ee646e56cb70bcfa82b3405e36f810b5de8d8c55f5ad4dc5bc84",
          "dweb:/ipfs/QmZTfoRCWaCx6Hi819kBKfv2tG2giDaReePZSUSx9Maugi"
        ],
        "license": "AGPL-3.0-or-later"
      },
      "src/ERC20BondToken.sol": {
        "keccak256": "0x14b11e975c3fb2f8aee2962e46aa1ab7c3ba145351f1c8f26e7f234fba9f4410",
        "urls": [
          "bzz-raw://b766eb91df473cd1be260b7ab4198eaef69e6f71f01572e113efb67043d11279",
          "dweb:/ipfs/QmSkaFo1ciHD7Dbdt5u8uinQdtmNg9GWCwFpcsuwb4R5HF"
        ],
        "license": "AGPL-3.0-or-later"
      },
      "src/bases/BondBaseOFDA.sol": {
        "keccak256": "0xea7fe20c43f00def3f676311ec9886935c59250e68f6e42a78e39ec995b09045",
        "urls": [
          "bzz-raw://29f6a9d3dd9ff4d192244f8fa93663c7e669772dd59ae3cf67d268e0953b5255",
          "dweb:/ipfs/QmQZDcTwq3JYRK1vUCPD9xuzKYDeQk86ZExynut7zwAVn9"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondAggregator.sol": {
        "keccak256": "0xcbed51d7460ff8cf4d21f7ede6214af17b18dc4267c97b33989d657c84b732db",
        "urls": [
          "bzz-raw://983965755356b317371609b20859cd2ca4c6493fa607d9dffaabb1d0cfd9dffb",
          "dweb:/ipfs/QmZJGhmKLLgi8wvBN6RrZF8y7sT6MgCYXx6NAM1bLqu5SU"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondAuctioneer.sol": {
        "keccak256": "0x72842370a860a167633d01b6806db55d6db1011985d8186bd7947ed35d397c38",
        "urls": [
          "bzz-raw://36c3eb05cd77617ce675871eb7b288ee6e9d75b60b82dbcf62667b08c37c2a8f",
          "dweb:/ipfs/QmcSddgbfTyfSZywcMDnWPsxs5nYgkBYBqzrEJWeEPzfT7"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondCallback.sol": {
        "keccak256": "0x3d3883bc1365a89aed6362221cee2da26d5bd8e2a1e4a01b5134415948df5a3e",
        "urls": [
          "bzz-raw://c16aa500c4aeaf62a3d46a93e8341b5a4c41ff3bdb203a15c465cd6dabf4f809",
          "dweb:/ipfs/QmaaQWiCbcxR5mUKKcjpWPDM8tqjBzbpvSzQfueG8yP4Bh"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondFixedExpiryTeller.sol": {
        "keccak256": "0x4530df5a76e94da12895a0d1912388700b17bee34c6c71c3762c5ae8dd5bbfe1",
        "urls": [
          "bzz-raw://c32dfd7b2803ec73451bba008ed427ce888215b0039e7a871247ed591d4ed373",
          "dweb:/ipfs/QmenLrALRdCMu8ttfyVwiSubM6vzCmAn1cL7vJgAcM76ag"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondOFDA.sol": {
        "keccak256": "0x28dcea17caf38456523961bede9ad3fcac051c8daaff67bb789ecdc2193d48e0",
        "urls": [
          "bzz-raw://e3ff270769f73e83b8a7daf3baf89ff96032d7af4e9bf5b55917969f869a18fb",
          "dweb:/ipfs/QmYgzN9XtW71HVsy6B2edWXzVYsH1MQ5YTwEKfzEnBRrUk"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondOracle.sol": {
        "keccak256": "0x7a88cb925d998d049fee844aa714b2b6e8255475f2c5f0b309a5c9213f28d532",
        "urls": [
          "bzz-raw://d0777ceee20b5aa166a35b0ecdb394f7abb36bbcbec48b5f885c92269a16ebcd",
          "dweb:/ipfs/QmQpMZEAMmzbo3b1jYfit7s4JHE2KjBd6DQxfaHC9tHNxC"
        ],
        "license": "AGPL-3.0"
      },
      "src/interfaces/IBondTeller.sol": {
        "keccak256": "0xb14fc9301858ec61abc52462699ced9f32478f1944b64c9398d811794d8769a1",
        "urls": [
          "bzz-raw://9a6fb18f623109e285ce99f8be07969d3e50a235543ceb28b5dc620d606ea150",
          "dweb:/ipfs/QmXAz2yXoZQ6XzkS9mwPc7Dkj7kD3RyhW9rix7daVvxkMf"
        ],
        "license": "AGPL-3.0"
      },
      "src/lib/CloneERC20.sol": {
        "keccak256": "0x44cf60ce8aab43c31e8b6641c417e6a26c3242847c267435906ddb46b37b82c4",
        "urls": [
          "bzz-raw://f8867033f95983416889a931bfe0396c29be883d62a8330668fadeb06b937fdf",
          "dweb:/ipfs/QmUUKxS87nt3mxZuwCMZrMgLBco3ZRcz4p69hVPuZ7RJ3h"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/lib/FullMath.sol": {
        "keccak256": "0x7804d45f19197ea7fd05fbaf2a78ef415cc670f90c50a19c7c3de644645d6139",
        "urls": [
          "bzz-raw://2c87974ab119538463ac6c2aee7ef99bb63564f62bc21dd6317a355b627a8323",
          "dweb:/ipfs/QmU5ptUahKDuX9T39BWbPzqpJFaLAiaauXghHGjoLk6nEg"
        ],
        "license": "MIT"
      },
      "src/lib/TransferHelper.sol": {
        "keccak256": "0x865961696dac7409544668120ea9b7720423a3198cb823378c9c244c50398c20",
        "urls": [
          "bzz-raw://728f7439dc495dc64969f047293d36235ba0b72da49f02c11a7816c5ef67a2eb",
          "dweb:/ipfs/QmZDWkHA8hSshRVycoyNw8rhrtmbdqxE1Qb3Bbf6gQDwT4"
        ],
        "license": "AGPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/BondFixedExpiryOFDA.sol",
    "id": 33458,
    "exportedSymbols": {
      "Authority": [
        29632
      ],
      "BondBaseOFDA": [
        37882
      ],
      "BondFixedExpiryOFDA": [
        33457
      ],
      "IBondAggregator": [
        42920
      ],
      "IBondFixedExpiryTeller": [
        43613
      ],
      "IBondTeller": [
        44166
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:3294:31",
    "nodes": [
      {
        "id": 33331,
        "nodeType": "PragmaDirective",
        "src": "46:23:31",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 33335,
        "nodeType": "ImportDirective",
        "src": "71:82:31",
        "nodes": [],
        "absolutePath": "src/bases/BondBaseOFDA.sol",
        "file": "./bases/BondBaseOFDA.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 33458,
        "sourceUnit": 37883,
        "symbolAliases": [
          {
            "foreign": {
              "id": 33332,
              "name": "BondBaseOFDA",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 37882,
              "src": "79:12:31",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 33333,
              "name": "IBondAggregator",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 42920,
              "src": "93:15:31",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 33334,
              "name": "Authority",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 29632,
              "src": "110:9:31",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 33337,
        "nodeType": "ImportDirective",
        "src": "154:57:31",
        "nodes": [],
        "absolutePath": "src/interfaces/IBondTeller.sol",
        "file": "./interfaces/IBondTeller.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 33458,
        "sourceUnit": 44167,
        "symbolAliases": [
          {
            "foreign": {
              "id": 33336,
              "name": "IBondTeller",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 44166,
              "src": "162:11:31",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 33339,
        "nodeType": "ImportDirective",
        "src": "212:79:31",
        "nodes": [],
        "absolutePath": "src/interfaces/IBondFixedExpiryTeller.sol",
        "file": "./interfaces/IBondFixedExpiryTeller.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 33458,
        "sourceUnit": 43614,
        "symbolAliases": [
          {
            "foreign": {
              "id": 33338,
              "name": "IBondFixedExpiryTeller",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 43613,
              "src": "220:22:31",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 33457,
        "nodeType": "ContractDefinition",
        "src": "1714:1625:31",
        "nodes": [
          {
            "id": 33363,
            "nodeType": "FunctionDefinition",
            "src": "1809:201:31",
            "nodes": [],
            "body": {
              "id": 33362,
              "nodeType": "Block",
              "src": "2008:2:31",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 33356,
                    "name": "teller_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 33345,
                    "src": "1963:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBondTeller_$44166",
                      "typeString": "contract IBondTeller"
                    }
                  },
                  {
                    "id": 33357,
                    "name": "aggregator_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 33348,
                    "src": "1972:11:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBondAggregator_$42920",
                      "typeString": "contract IBondAggregator"
                    }
                  },
                  {
                    "id": 33358,
                    "name": "guardian_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 33350,
                    "src": "1985:9:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 33359,
                    "name": "authority_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 33353,
                    "src": "1996:10:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Authority_$29632",
                      "typeString": "contract Authority"
                    }
                  }
                ],
                "id": 33360,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 33355,
                  "name": "BondBaseOFDA",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 37882,
                  "src": "1950:12:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "1950:57:31"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 33354,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33345,
                  "mutability": "mutable",
                  "name": "teller_",
                  "nameLocation": "1842:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 33363,
                  "src": "1830:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IBondTeller_$44166",
                    "typeString": "contract IBondTeller"
                  },
                  "typeName": {
                    "id": 33344,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 33343,
                      "name": "IBondTeller",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 44166,
                      "src": "1830:11:31"
                    },
                    "referencedDeclaration": 44166,
                    "src": "1830:11:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBondTeller_$44166",
                      "typeString": "contract IBondTeller"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33348,
                  "mutability": "mutable",
                  "name": "aggregator_",
                  "nameLocation": "1875:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 33363,
                  "src": "1859:27:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IBondAggregator_$42920",
                    "typeString": "contract IBondAggregator"
                  },
                  "typeName": {
                    "id": 33347,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 33346,
                      "name": "IBondAggregator",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 42920,
                      "src": "1859:15:31"
                    },
                    "referencedDeclaration": 42920,
                    "src": "1859:15:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBondAggregator_$42920",
                      "typeString": "contract IBondAggregator"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33350,
                  "mutability": "mutable",
                  "name": "guardian_",
                  "nameLocation": "1904:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 33363,
                  "src": "1896:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 33349,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1896:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33353,
                  "mutability": "mutable",
                  "name": "authority_",
                  "nameLocation": "1933:10:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 33363,
                  "src": "1923:20:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Authority_$29632",
                    "typeString": "contract Authority"
                  },
                  "typeName": {
                    "id": 33352,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 33351,
                      "name": "Authority",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29632,
                      "src": "1923:9:31"
                    },
                    "referencedDeclaration": 29632,
                    "src": "1923:9:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Authority_$29632",
                      "typeString": "contract Authority"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1820:129:31"
            },
            "returnParameters": {
              "id": 33361,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2008:0:31"
            },
            "scope": 33457,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 33456,
            "nodeType": "FunctionDefinition",
            "src": "2049:1288:31",
            "nodes": [],
            "body": {
              "id": 33455,
              "nodeType": "Block",
              "src": "2131:1206:31",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    33374
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33374,
                      "mutability": "mutable",
                      "name": "params",
                      "nameLocation": "2235:6:31",
                      "nodeType": "VariableDeclaration",
                      "scope": 33455,
                      "src": "2215:26:31",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                        "typeString": "struct IBondOFDA.MarketParams"
                      },
                      "typeName": {
                        "id": 33373,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 33372,
                          "name": "MarketParams",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 43772,
                          "src": "2215:12:31"
                        },
                        "referencedDeclaration": 43772,
                        "src": "2215:12:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_storage_ptr",
                          "typeString": "struct IBondOFDA.MarketParams"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33381,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 33377,
                        "name": "params_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33366,
                        "src": "2255:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 33378,
                            "name": "MarketParams",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43772,
                            "src": "2265:12:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_MarketParams_$43772_storage_ptr_$",
                              "typeString": "type(struct IBondOFDA.MarketParams storage pointer)"
                            }
                          }
                        ],
                        "id": 33379,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "2264:14:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_MarketParams_$43772_storage_ptr_$",
                          "typeString": "type(struct IBondOFDA.MarketParams storage pointer)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_struct$_MarketParams_$43772_storage_ptr_$",
                          "typeString": "type(struct IBondOFDA.MarketParams storage pointer)"
                        }
                      ],
                      "expression": {
                        "id": 33375,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "2244:3:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 33376,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "2244:10:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 33380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2244:35:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                      "typeString": "struct IBondOFDA.MarketParams memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2215:64:31"
                },
                {
                  "expression": {
                    "id": 33392,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 33382,
                        "name": "params",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33374,
                        "src": "2445:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                          "typeString": "struct IBondOFDA.MarketParams memory"
                        }
                      },
                      "id": 33384,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "vesting",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 43767,
                      "src": "2445:14:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      },
                      "id": 33391,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint48",
                              "typeString": "uint48"
                            },
                            "id": 33388,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 33385,
                                "name": "params",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 33374,
                                "src": "2463:6:31",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                                  "typeString": "struct IBondOFDA.MarketParams memory"
                                }
                              },
                              "id": 33386,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "vesting",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 43767,
                              "src": "2463:14:31",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint48",
                                "typeString": "uint48"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 33387,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2480:6:31",
                              "subdenomination": "days",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_86400_by_1",
                                "typeString": "int_const 86400"
                              },
                              "value": "1"
                            },
                            "src": "2463:23:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint48",
                              "typeString": "uint48"
                            }
                          }
                        ],
                        "id": 33389,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "2462:25:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 33390,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2490:6:31",
                        "subdenomination": "days",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_86400_by_1",
                          "typeString": "int_const 86400"
                        },
                        "value": "1"
                      },
                      "src": "2462:34:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "src": "2445:51:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint48",
                      "typeString": "uint48"
                    }
                  },
                  "id": 33393,
                  "nodeType": "ExpressionStatement",
                  "src": "2445:51:31"
                },
                {
                  "assignments": [
                    33395
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33395,
                      "mutability": "mutable",
                      "name": "start",
                      "nameLocation": "2676:5:31",
                      "nodeType": "VariableDeclaration",
                      "scope": 33455,
                      "src": "2669:12:31",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      },
                      "typeName": {
                        "id": 33394,
                        "name": "uint48",
                        "nodeType": "ElementaryTypeName",
                        "src": "2669:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33408,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      },
                      "id": 33399,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 33396,
                          "name": "params",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33374,
                          "src": "2684:6:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                            "typeString": "struct IBondOFDA.MarketParams memory"
                          }
                        },
                        "id": 33397,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "start",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43769,
                        "src": "2684:12:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 33398,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2700:1:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "2684:17:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "expression": {
                        "id": 33405,
                        "name": "params",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33374,
                        "src": "2730:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                          "typeString": "struct IBondOFDA.MarketParams memory"
                        }
                      },
                      "id": 33406,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "start",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 43769,
                      "src": "2730:12:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "id": 33407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "2684:58:31",
                    "trueExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 33402,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "2711:5:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 33403,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "2711:15:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 33401,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "2704:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint48_$",
                          "typeString": "type(uint48)"
                        },
                        "typeName": {
                          "id": 33400,
                          "name": "uint48",
                          "nodeType": "ElementaryTypeName",
                          "src": "2704:6:31",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 33404,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2704:23:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint48",
                      "typeString": "uint48"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2669:73:31"
                },
                {
                  "assignments": [
                    33410
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33410,
                      "mutability": "mutable",
                      "name": "conclusion",
                      "nameLocation": "2759:10:31",
                      "nodeType": "VariableDeclaration",
                      "scope": 33455,
                      "src": "2752:17:31",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      },
                      "typeName": {
                        "id": 33409,
                        "name": "uint48",
                        "nodeType": "ElementaryTypeName",
                        "src": "2752:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33415,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint48",
                      "typeString": "uint48"
                    },
                    "id": 33414,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 33411,
                      "name": "start",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33395,
                      "src": "2772:5:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "expression": {
                        "id": 33412,
                        "name": "params",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33374,
                        "src": "2780:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                          "typeString": "struct IBondOFDA.MarketParams memory"
                        }
                      },
                      "id": 33413,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "duration",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 43771,
                      "src": "2780:15:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "src": "2772:23:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint48",
                      "typeString": "uint48"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2752:43:31"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 33424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      },
                      "id": 33419,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 33416,
                          "name": "params",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33374,
                          "src": "2889:6:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                            "typeString": "struct IBondOFDA.MarketParams memory"
                          }
                        },
                        "id": 33417,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "vesting",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43767,
                        "src": "2889:14:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 33418,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2907:1:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "2889:19:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      },
                      "id": 33423,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 33420,
                          "name": "params",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33374,
                          "src": "2912:6:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                            "typeString": "struct IBondOFDA.MarketParams memory"
                          }
                        },
                        "id": 33421,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "vesting",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43767,
                        "src": "2912:14:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "id": 33422,
                        "name": "conclusion",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33410,
                        "src": "2929:10:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint48",
                          "typeString": "uint48"
                        }
                      },
                      "src": "2912:27:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2889:50:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 33428,
                  "nodeType": "IfStatement",
                  "src": "2885:89:31",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 33425,
                        "name": "Auctioneer_InvalidParams",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36459,
                        "src": "2948:24:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 33426,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2948:26:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 33427,
                    "nodeType": "RevertStatement",
                    "src": "2941:33:31"
                  }
                },
                {
                  "assignments": [
                    33430
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33430,
                      "mutability": "mutable",
                      "name": "marketId",
                      "nameLocation": "3039:8:31",
                      "nodeType": "VariableDeclaration",
                      "scope": 33455,
                      "src": "3031:16:31",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 33429,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3031:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33434,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 33432,
                        "name": "params",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33374,
                        "src": "3064:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                          "typeString": "struct IBondOFDA.MarketParams memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                          "typeString": "struct IBondOFDA.MarketParams memory"
                        }
                      ],
                      "id": 33431,
                      "name": "_createMarket",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 36889,
                      "src": "3050:13:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParams_$43772_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (struct IBondOFDA.MarketParams memory) returns (uint256)"
                      }
                    },
                    "id": 33433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3050:21:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3031:40:31"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint48",
                      "typeString": "uint48"
                    },
                    "id": 33438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 33435,
                        "name": "params",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33374,
                        "src": "3160:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                          "typeString": "struct IBondOFDA.MarketParams memory"
                        }
                      },
                      "id": 33436,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "vesting",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 43767,
                      "src": "3160:14:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint48",
                        "typeString": "uint48"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 33437,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3178:1:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3160:19:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 33452,
                  "nodeType": "IfStatement",
                  "src": "3156:120:31",
                  "trueBody": {
                    "expression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 33446,
                            "name": "params",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 33374,
                            "src": "3241:6:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                              "typeString": "struct IBondOFDA.MarketParams memory"
                            }
                          },
                          "id": 33447,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "payoutToken",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 43747,
                          "src": "3241:18:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$30350",
                            "typeString": "contract ERC20"
                          }
                        },
                        {
                          "expression": {
                            "id": 33448,
                            "name": "params",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 33374,
                            "src": "3261:6:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MarketParams_$43772_memory_ptr",
                              "typeString": "struct IBondOFDA.MarketParams memory"
                            }
                          },
                          "id": 33449,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "vesting",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 43767,
                          "src": "3261:14:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint48",
                            "typeString": "uint48"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_ERC20_$30350",
                            "typeString": "contract ERC20"
                          },
                          {
                            "typeIdentifier": "t_uint48",
                            "typeString": "uint48"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 33442,
                                  "name": "_teller",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 36524,
                                  "src": "3224:7:31",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBondTeller_$44166",
                                    "typeString": "contract IBondTeller"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBondTeller_$44166",
                                    "typeString": "contract IBondTeller"
                                  }
                                ],
                                "id": 33441,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3216:7:31",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 33440,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3216:7:31",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 33443,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3216:16:31",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 33439,
                            "name": "IBondFixedExpiryTeller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43613,
                            "src": "3193:22:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IBondFixedExpiryTeller_$43613_$",
                              "typeString": "type(contract IBondFixedExpiryTeller)"
                            }
                          },
                          "id": 33444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3193:40:31",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBondFixedExpiryTeller_$43613",
                            "typeString": "contract IBondFixedExpiryTeller"
                          }
                        },
                        "id": 33445,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deploy",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43591,
                        "src": "3193:47:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_contract$_ERC20_$30350_$_t_uint48_$returns$_t_contract$_ERC20BondToken_$35309_$",
                          "typeString": "function (contract ERC20,uint48) external returns (contract ERC20BondToken)"
                        }
                      },
                      "id": 33450,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3193:83:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20BondToken_$35309",
                        "typeString": "contract ERC20BondToken"
                      }
                    },
                    "id": 33451,
                    "nodeType": "ExpressionStatement",
                    "src": "3193:83:31"
                  }
                },
                {
                  "expression": {
                    "id": 33453,
                    "name": "marketId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 33430,
                    "src": "3322:8:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 33371,
                  "id": 33454,
                  "nodeType": "Return",
                  "src": "3315:15:31"
                }
              ]
            },
            "baseFunctions": [
              36571
            ],
            "documentation": {
              "id": 33364,
              "nodeType": "StructuredDocumentation",
              "src": "2016:28:31",
              "text": "@inheritdoc BondBaseOFDA"
            },
            "functionSelector": "53c7f8e0",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createMarket",
            "nameLocation": "2058:12:31",
            "overrides": {
              "id": 33368,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2104:8:31"
            },
            "parameters": {
              "id": 33367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33366,
                  "mutability": "mutable",
                  "name": "params_",
                  "nameLocation": "2086:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 33456,
                  "src": "2071:22:31",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 33365,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2071:5:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2070:24:31"
            },
            "returnParameters": {
              "id": 33371,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33370,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 33456,
                  "src": "2122:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 33369,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2122:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2121:9:31"
            },
            "scope": 33457,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 33341,
              "name": "BondBaseOFDA",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 37882,
              "src": "1746:12:31"
            },
            "id": 33342,
            "nodeType": "InheritanceSpecifier",
            "src": "1746:12:31"
          }
        ],
        "canonicalName": "BondFixedExpiryOFDA",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 33340,
          "nodeType": "StructuredDocumentation",
          "src": "293:1421:31",
          "text": "@title Bond Fixed-Expiry Fixed Discount Auctioneer\n @notice Bond Fixed-Expiry Fixed Discount Auctioneer Contract\n @dev Bond Protocol is a permissionless system to create bond markets\n      for any token pair. Bond issuers create BondMarkets that pay out\n      a Payout Token in exchange for deposited Quote Tokens. Users can purchase\n      future-dated Payout Tokens with Quote Tokens at the current market price and\n      receive Bond Tokens to represent their position while their bond vests.\n      Once the Bond Tokens vest, they can redeem it for the Quote Tokens.\n @dev An Auctioneer contract allows users to create and manage bond markets.\n      All bond pricing logic and market data is stored in the Auctioneer.\n      An Auctioneer is dependent on a Teller to serve external users and\n      an Aggregator to register new markets. The Fixed Discount Auctioneer\n      lets issuers set a Fixed Discount to an oracle price to buy a\n      target amount of quote tokens or sell a target amount of payout tokens\n      over the duration of a market.\n      See IBondOFDA.sol for price format details.\n @dev The Fixed-Expiry Fixed Discount Auctioneer is an implementation of the\n      Bond Base Fixed Discount Auctioneer contract specific to creating bond markets where\n      all purchases on that market vest at a certain timestamp.\n @author Oighty"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          33457,
          37882,
          29619,
          43802,
          43105
        ],
        "name": "BondFixedExpiryOFDA",
        "nameLocation": "1723:19:31",
        "scope": 33458,
        "usedErrors": [
          36445,
          36447,
          36449,
          36451,
          36453,
          36455,
          36457,
          36459,
          36461,
          36463,
          36465
        ]
      }
    ],
    "license": "AGPL-3.0-or-later"
  },
  "id": 31
}