{
  "openapi": "3.1.0",
  "info": {
    "version": "0.0.1",
    "title": "Order Services API"
  },
  "servers": [
    {
      "description": "Local",
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/auth/nonce": {
      "get": {
        "summary": "Get a nonce for a sign in request.",
        "operationId": "getNonce",
        "responses": {
          "200": {
            "description": "Nonce has been created.",
            "content": {
              "application/json": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Error creating a nonce."
          }
        }
      }
    },
    "/auth/sign_in": {
      "post": {
        "summary": "Signs the user in, creating and returning a JWT",
        "operationId": "signIn",
        "requestBody": {
          "description": "The Sign in With Ethereum message and signature.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully signed in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTPair"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - nonce is invalid or does not match nonce in signature."
          },
          "500": {
            "description": "Error creating a nonce."
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Checks a provided refresh token, returns a new access token and refresh token.",
        "operationId": "refreshAuth",
        "requestBody": {
          "description": "The user's current refresh token.",
          "required": true,
          "content": {
            "application/json": {
              "type": "string"
            }
          }
        },
        "responses": {
          "200": {
            "400": {
              "description": "Bad Request - refresh token provided is not valid."
            },
            "description": "Successfully refreshed tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTPair"
                }
              }
            }
          },
          "500": {
            "description": "Error refreshing tokens."
          }
        }
      }
    },
    "/auth/test": {
      "get": {
        "summary": "Tests whether signed in user can view address provided in params.",
        "operationId": "testAuth",
        "responses": {
          "200": {
            "description": "User is authorized to view the address.",
            "content": {
              "application/json": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/orders/new": {
      "post": {
        "summary": "Submit a new order.",
        "operationId": "createOrder",
        "headers": {
          "X-Chain-Id": {
            "description": "The chain id to check",
            "schema": {
              "type": "integer"
            }
          },
          "X-Aggregator": {
            "description": "The address of the aggregator contract",
            "schema": {
              "type": "string"
            }
          },
          "X-Settlement": {
            "description": "The address of the settlement contract",
            "schema": {
              "type": "string"
            }
          }
        },
        "requestBody": {
          "description": "A signed OrderRequest.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "400": {
              "description": "Bad Request - OrderRequest is not valid."
            },
            "description": "Successfully submitted OrderRequest.",
            "content": {
              "application/json": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Error processing OrderRequest."
          }
        }
      }
    },
    "/orders/address/{account_address}": {
      "get": {
        "summary": "Get orders for user address",
        "operationId": "getOrdersByAddress",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "headers": {
          "Authorization": {
            "description": "JWT Bearer token",
            "schema": {
              "type": "string"
            }
          },
          "X-Chain-Id": {
            "description": "The chain id to check",
            "schema": {
              "type": "integer"
            }
          },
          "X-Aggregator": {
            "description": "The address of the aggregator contract",
            "schema": {
              "type": "string"
            }
          },
          "X-Settlement": {
            "description": "The address of the settlement contract",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "description": "The address to get orders for",
            "name": "account_address",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of orders for the specified address.",
            "content": {
              "application/json": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "500": {
            "description": "Error finding Orders."
          }
        }
      }
    },
    "/orders/address/{account_address}/active": {
      "get": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "summary": "Get active orders for user address",
        "operationId": "getActiveOrdersByAddress",
        "headers": {
          "Authorization": {
            "description": "JWT Bearer token",
            "schema": {
              "type": "string"
            }
          },
          "X-Chain-Id": {
            "description": "The chain id to check",
            "schema": {
              "type": "integer"
            }
          },
          "X-Aggregator": {
            "description": "The address of the aggregator contract",
            "schema": {
              "type": "string"
            }
          },
          "X-Settlement": {
            "description": "The address of the settlement contract",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "description": "The address to get active orders for",
            "name": "account_address",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of active orders for the specified address.",
            "content": {
              "application/json": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "500": {
            "description": "Error finding Orders."
          }
        }
      }
    },
    "/permissions/executors": {
      "get": {
        "summary": "Get addresses with executor permissions",
        "operationId": "getExecutors",
        "headers": {
          "X-Chain-Id": {
            "description": "The chain id to check",
            "schema": {
              "type": "integer"
            }
          },
          "X-Aggregator": {
            "description": "The address of the aggregator contract",
            "schema": {
              "type": "string"
            }
          },
          "X-Settlement": {
            "description": "The address of the settlement contract",
            "schema": {
              "type": "string"
            }
          }
        },
        "responses": {
          "200": {
            "description": "An array of active orders for the specified address.",
            "content": {
              "application/json": {
                "type": "array",
                "items": {
                  "description": "Addresses with executor permissions",
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error finding executors."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "JWTPair": {
        "description": "A JSON object containing two string fields, access_token and refresh_token.",
        "type": "object",
        "required": ["access_token", "refresh_token"],
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "SigninData": {
        "description": "A JSON object containing two string fields, a Sign in With Ethereum message and signature. The nonce found in the decoded signature should match the nonce in the message.",
        "type": "object",
        "required": ["message", "signature"],
        "properties": {
          "message": {
            "type": "string",
            "description": "The SiWE message"
          },
          "signature": {
            "type": "string",
            "description": ""
          }
        }
      },
      "OrderRequest": {
        "description": "Parameters for an order, including a signature.",
        "type": "object",
        "properties": {
          "market_id": {
            "description": "The id of the market an order is being placed for.",
            "type": "string"
          },
          "recipient": {
            "description": "The address which will receive the purchased tokens.",
            "type": "string"
          },
          "referrer": {
            "description": "The address which will receive the referral fee.",
            "type": "string"
          },
          "amount": {
            "description": "The amount of tokens to purchase.",
            "type": "string"
          },
          "min_amount_out": {
            "description": "The minimum number of tokens the recipient is willing to receive.",
            "type": "string"
          },
          "max_fee": {
            "description": "The maximum fee the recipient will pay.",
            "type": "string"
          },
          "submitted": {
            "description": "Timestamp at which the order was submitted.",
            "type": "string"
          },
          "deadline": {
            "description": "Timestamp at which the order expires.",
            "type": "string"
          },
          "user": {
            "description": "Address of the user who submitted the order.",
            "type": "string"
          },
          "signature": {
            "description": "Signature for a tx containing the same order data.",
            "type": "string"
          }
        }
      },
      "Order": {
        "description": "Details of an existing order.",
        "type": "object",
        "properties": {
          "market_id": {
            "description": "The id of the market an order is being placed for.",
            "type": "string"
          },
          "recipient": {
            "description": "The address which will receive the purchased tokens.",
            "type": "string"
          },
          "referrer": {
            "description": "The address which will receive the referral fee.",
            "type": "string"
          },
          "amount": {
            "description": "The amount of tokens to purchase.",
            "type": "string"
          },
          "min_amount_out": {
            "description": "The minimum number of tokens the recipient is willing to receive.",
            "type": "string"
          },
          "max_fee": {
            "description": "The maximum fee the recipient will pay.",
            "type": "string"
          },
          "submitted": {
            "description": "Timestamp at which the order was submitted.",
            "type": "string"
          },
          "deadline": {
            "description": "Timestamp at which the order expires.",
            "type": "string"
          },
          "user": {
            "description": "Address of the user who submitted the order.",
            "type": "string"
          }
        }
      }
    }
  }
}
